
var VireoCreateCoreModule = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;
  return (
function(VireoCreateCoreModule) {
  VireoCreateCoreModule = VireoCreateCoreModule || {};

var Module = typeof VireoCreateCoreModule !== "undefined" ? VireoCreateCoreModule : {};

var readyPromiseResolve, readyPromiseReject;

Module["ready"] = new Promise(function(resolve, reject) {
 readyPromiseResolve = resolve;
 readyPromiseReject = reject;
});

Module.vireoprejs = function() {};

var moduleOverrides = {};

var key;

for (key in Module) {
 if (Module.hasOwnProperty(key)) {
  moduleOverrides[key] = Module[key];
 }
}

var arguments_ = [];

var thisProgram = "./this.program";

var quit_ = function(status, toThrow) {
 throw toThrow;
};

var ENVIRONMENT_IS_WEB = false;

var ENVIRONMENT_IS_WORKER = false;

var ENVIRONMENT_IS_NODE = false;

var ENVIRONMENT_IS_SHELL = false;

ENVIRONMENT_IS_WEB = typeof window === "object";

ENVIRONMENT_IS_WORKER = typeof importScripts === "function";

ENVIRONMENT_IS_NODE = typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node === "string";

ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

var scriptDirectory = "";

function locateFile(path) {
 if (Module["locateFile"]) {
  return Module["locateFile"](path, scriptDirectory);
 }
 return scriptDirectory + path;
}

var read_, readAsync, readBinary, setWindowTitle;

var nodeFS;

var nodePath;

if (ENVIRONMENT_IS_NODE) {
 if (ENVIRONMENT_IS_WORKER) {
  scriptDirectory = require("path").dirname(scriptDirectory) + "/";
 } else {
  scriptDirectory = __dirname + "/";
 }
 read_ = function shell_read(filename, binary) {
  if (!nodeFS) nodeFS = require("fs");
  if (!nodePath) nodePath = require("path");
  filename = nodePath["normalize"](filename);
  return nodeFS["readFileSync"](filename, binary ? null : "utf8");
 };
 readBinary = function readBinary(filename) {
  var ret = read_(filename, true);
  if (!ret.buffer) {
   ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
 };
 if (process["argv"].length > 1) {
  thisProgram = process["argv"][1].replace(/\\/g, "/");
 }
 arguments_ = process["argv"].slice(2);
 process["on"]("uncaughtException", function(ex) {
  if (!(ex instanceof ExitStatus)) {
   throw ex;
  }
 });
 process["on"]("unhandledRejection", abort);
 quit_ = function(status) {
  process["exit"](status);
 };
 Module["inspect"] = function() {
  return "[Emscripten Module object]";
 };
} else if (ENVIRONMENT_IS_SHELL) {
 if (typeof read != "undefined") {
  read_ = function shell_read(f) {
   return read(f);
  };
 }
 readBinary = function readBinary(f) {
  var data;
  if (typeof readbuffer === "function") {
   return new Uint8Array(readbuffer(f));
  }
  data = read(f, "binary");
  assert(typeof data === "object");
  return data;
 };
 if (typeof scriptArgs != "undefined") {
  arguments_ = scriptArgs;
 } else if (typeof arguments != "undefined") {
  arguments_ = arguments;
 }
 if (typeof quit === "function") {
  quit_ = function(status) {
   quit(status);
  };
 }
 if (typeof print !== "undefined") {
  if (typeof console === "undefined") console = {};
  console.log = print;
  console.warn = console.error = typeof printErr !== "undefined" ? printErr : print;
 }
} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
 if (ENVIRONMENT_IS_WORKER) {
  scriptDirectory = self.location.href;
 } else if (typeof document !== "undefined" && document.currentScript) {
  scriptDirectory = document.currentScript.src;
 }
 if (_scriptDir) {
  scriptDirectory = _scriptDir;
 }
 if (scriptDirectory.indexOf("blob:") !== 0) {
  scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf("/") + 1);
 } else {
  scriptDirectory = "";
 }
 {
  read_ = function(url) {
   var xhr = new XMLHttpRequest();
   xhr.open("GET", url, false);
   xhr.send(null);
   return xhr.responseText;
  };
  if (ENVIRONMENT_IS_WORKER) {
   readBinary = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", url, false);
    xhr.responseType = "arraybuffer";
    xhr.send(null);
    return new Uint8Array(xhr.response);
   };
  }
  readAsync = function(url, onload, onerror) {
   var xhr = new XMLHttpRequest();
   xhr.open("GET", url, true);
   xhr.responseType = "arraybuffer";
   xhr.onload = function() {
    if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
     onload(xhr.response);
     return;
    }
    onerror();
   };
   xhr.onerror = onerror;
   xhr.send(null);
  };
 }
 setWindowTitle = function(title) {
  document.title = title;
 };
} else {}

var out = Module["print"] || console.log.bind(console);

var err = Module["printErr"] || console.warn.bind(console);

for (key in moduleOverrides) {
 if (moduleOverrides.hasOwnProperty(key)) {
  Module[key] = moduleOverrides[key];
 }
}

moduleOverrides = null;

if (Module["arguments"]) arguments_ = Module["arguments"];

if (Module["thisProgram"]) thisProgram = Module["thisProgram"];

if (Module["quit"]) quit_ = Module["quit"];

var wasmBinary;

if (Module["wasmBinary"]) wasmBinary = Module["wasmBinary"];

var noExitRuntime = Module["noExitRuntime"] || true;

if (typeof WebAssembly !== "object") {
 abort("no native wasm support detected");
}

function setValue(ptr, value, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  HEAP8[ptr >> 0] = value;
  break;

 case "i8":
  HEAP8[ptr >> 0] = value;
  break;

 case "i16":
  HEAP16[ptr >> 1] = value;
  break;

 case "i32":
  HEAP32[ptr >> 2] = value;
  break;

 case "i64":
  tempI64 = [ value >>> 0, (tempDouble = value, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0) ], 
  HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
  break;

 case "float":
  HEAPF32[ptr >> 2] = value;
  break;

 case "double":
  HEAPF64[ptr >> 3] = value;
  break;

 default:
  abort("invalid type for setValue: " + type);
 }
}

function getValue(ptr, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  return HEAP8[ptr >> 0];

 case "i8":
  return HEAP8[ptr >> 0];

 case "i16":
  return HEAP16[ptr >> 1];

 case "i32":
  return HEAP32[ptr >> 2];

 case "i64":
  return HEAP32[ptr >> 2];

 case "float":
  return HEAPF32[ptr >> 2];

 case "double":
  return HEAPF64[ptr >> 3];

 default:
  abort("invalid type for getValue: " + type);
 }
 return null;
}

var wasmMemory;

var ABORT = false;

var EXITSTATUS;

function assert(condition, text) {
 if (!condition) {
  abort("Assertion failed: " + text);
 }
}

var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : undefined;

function UTF8ArrayToString(heap, idx, maxBytesToRead) {
 var endIdx = idx + maxBytesToRead;
 var endPtr = idx;
 while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;
 if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
  return UTF8Decoder.decode(heap.subarray(idx, endPtr));
 } else {
  var str = "";
  while (idx < endPtr) {
   var u0 = heap[idx++];
   if (!(u0 & 128)) {
    str += String.fromCharCode(u0);
    continue;
   }
   var u1 = heap[idx++] & 63;
   if ((u0 & 224) == 192) {
    str += String.fromCharCode((u0 & 31) << 6 | u1);
    continue;
   }
   var u2 = heap[idx++] & 63;
   if ((u0 & 240) == 224) {
    u0 = (u0 & 15) << 12 | u1 << 6 | u2;
   } else {
    u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63;
   }
   if (u0 < 65536) {
    str += String.fromCharCode(u0);
   } else {
    var ch = u0 - 65536;
    str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
   }
  }
 }
 return str;
}

function UTF8ToString(ptr, maxBytesToRead) {
 return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
}

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
 if (!(maxBytesToWrite > 0)) return 0;
 var startIdx = outIdx;
 var endIdx = outIdx + maxBytesToWrite - 1;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) {
   var u1 = str.charCodeAt(++i);
   u = 65536 + ((u & 1023) << 10) | u1 & 1023;
  }
  if (u <= 127) {
   if (outIdx >= endIdx) break;
   heap[outIdx++] = u;
  } else if (u <= 2047) {
   if (outIdx + 1 >= endIdx) break;
   heap[outIdx++] = 192 | u >> 6;
   heap[outIdx++] = 128 | u & 63;
  } else if (u <= 65535) {
   if (outIdx + 2 >= endIdx) break;
   heap[outIdx++] = 224 | u >> 12;
   heap[outIdx++] = 128 | u >> 6 & 63;
   heap[outIdx++] = 128 | u & 63;
  } else {
   if (outIdx + 3 >= endIdx) break;
   heap[outIdx++] = 240 | u >> 18;
   heap[outIdx++] = 128 | u >> 12 & 63;
   heap[outIdx++] = 128 | u >> 6 & 63;
   heap[outIdx++] = 128 | u & 63;
  }
 }
 heap[outIdx] = 0;
 return outIdx - startIdx;
}

function stringToUTF8(str, outPtr, maxBytesToWrite) {
 return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}

function lengthBytesUTF8(str) {
 var len = 0;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
  if (u <= 127) ++len; else if (u <= 2047) len += 2; else if (u <= 65535) len += 3; else len += 4;
 }
 return len;
}

function allocateUTF8(str) {
 var size = lengthBytesUTF8(str) + 1;
 var ret = _malloc(size);
 if (ret) stringToUTF8Array(str, HEAP8, ret, size);
 return ret;
}

function alignUp(x, multiple) {
 if (x % multiple > 0) {
  x += multiple - x % multiple;
 }
 return x;
}

var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBufferAndViews(buf) {
 buffer = buf;
 Module["HEAP8"] = HEAP8 = new Int8Array(buf);
 Module["HEAP16"] = HEAP16 = new Int16Array(buf);
 Module["HEAP32"] = HEAP32 = new Int32Array(buf);
 Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
 Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
 Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
 Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
 Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
}

var INITIAL_MEMORY = Module["INITIAL_MEMORY"] || 16777216;

var wasmTable;

var __ATPRERUN__ = [];

var __ATINIT__ = [];

var __ATPOSTRUN__ = [];

var runtimeInitialized = false;

var runtimeExited = false;

function preRun() {
 if (Module["preRun"]) {
  if (typeof Module["preRun"] == "function") Module["preRun"] = [ Module["preRun"] ];
  while (Module["preRun"].length) {
   addOnPreRun(Module["preRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
 runtimeInitialized = true;
 callRuntimeCallbacks(__ATINIT__);
}

function exitRuntime() {
 runtimeExited = true;
}

function postRun() {
 if (Module["postRun"]) {
  if (typeof Module["postRun"] == "function") Module["postRun"] = [ Module["postRun"] ];
  while (Module["postRun"].length) {
   addOnPostRun(Module["postRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
 __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
 __ATINIT__.unshift(cb);
}

function addOnPostRun(cb) {
 __ATPOSTRUN__.unshift(cb);
}

var runDependencies = 0;

var runDependencyWatcher = null;

var dependenciesFulfilled = null;

function addRunDependency(id) {
 runDependencies++;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
}

function removeRunDependency(id) {
 runDependencies--;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
 if (runDependencies == 0) {
  if (runDependencyWatcher !== null) {
   clearInterval(runDependencyWatcher);
   runDependencyWatcher = null;
  }
  if (dependenciesFulfilled) {
   var callback = dependenciesFulfilled;
   dependenciesFulfilled = null;
   callback();
  }
 }
}

Module["preloadedImages"] = {};

Module["preloadedAudios"] = {};

function abort(what) {
 if (Module["onAbort"]) {
  Module["onAbort"](what);
 }
 what += "";
 err(what);
 ABORT = true;
 EXITSTATUS = 1;
 what = "abort(" + what + "). Build with -s ASSERTIONS=1 for more info.";
 var e = new WebAssembly.RuntimeError(what);
 readyPromiseReject(e);
 throw e;
}

var dataURIPrefix = "data:application/octet-stream;base64,";

function isDataURI(filename) {
 return filename.startsWith(dataURIPrefix);
}

function isFileURI(filename) {
 return filename.startsWith("file://");
}

var wasmBinaryFile = "vireo.core.wasm";

if (!isDataURI(wasmBinaryFile)) {
 wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary(file) {
 try {
  if (file == wasmBinaryFile && wasmBinary) {
   return new Uint8Array(wasmBinary);
  }
  if (readBinary) {
   return readBinary(file);
  } else {
   throw "both async and sync fetching of the wasm failed";
  }
 } catch (err) {
  abort(err);
 }
}

function getBinaryPromise() {
 if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
  if (typeof fetch === "function" && !isFileURI(wasmBinaryFile)) {
   return fetch(wasmBinaryFile, {
    credentials: "same-origin"
   }).then(function(response) {
    if (!response["ok"]) {
     throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
    }
    return response["arrayBuffer"]();
   }).catch(function() {
    return getBinary(wasmBinaryFile);
   });
  } else {
   if (readAsync) {
    return new Promise(function(resolve, reject) {
     readAsync(wasmBinaryFile, function(response) {
      resolve(new Uint8Array(response));
     }, reject);
    });
   }
  }
 }
 return Promise.resolve().then(function() {
  return getBinary(wasmBinaryFile);
 });
}

function createWasm() {
 var info = {
  "a": asmLibraryArg
 };
 function receiveInstance(instance, module) {
  var exports = instance.exports;
  Module["asm"] = exports;
  wasmMemory = Module["asm"]["D"];
  updateGlobalBufferAndViews(wasmMemory.buffer);
  wasmTable = Module["asm"]["F"];
  addOnInit(Module["asm"]["E"]);
  removeRunDependency("wasm-instantiate");
 }
 addRunDependency("wasm-instantiate");
 function receiveInstantiationResult(result) {
  receiveInstance(result["instance"]);
 }
 function instantiateArrayBuffer(receiver) {
  return getBinaryPromise().then(function(binary) {
   var result = WebAssembly.instantiate(binary, info);
   return result;
  }).then(receiver, function(reason) {
   err("failed to asynchronously prepare wasm: " + reason);
   abort(reason);
  });
 }
 function instantiateAsync() {
  if (!wasmBinary && typeof WebAssembly.instantiateStreaming === "function" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && typeof fetch === "function") {
   return fetch(wasmBinaryFile, {
    credentials: "same-origin"
   }).then(function(response) {
    var result = WebAssembly.instantiateStreaming(response, info);
    return result.then(receiveInstantiationResult, function(reason) {
     err("wasm streaming compile failed: " + reason);
     err("falling back to ArrayBuffer instantiation");
     return instantiateArrayBuffer(receiveInstantiationResult);
    });
   });
  } else {
   return instantiateArrayBuffer(receiveInstantiationResult);
  }
 }
 if (Module["instantiateWasm"]) {
  try {
   var exports = Module["instantiateWasm"](info, receiveInstance);
   return exports;
  } catch (e) {
   err("Module.instantiateWasm callback failed with error: " + e);
   return false;
  }
 }
 instantiateAsync().catch(readyPromiseReject);
 return {};
}

var tempDouble;

var tempI64;

function callRuntimeCallbacks(callbacks) {
 while (callbacks.length > 0) {
  var callback = callbacks.shift();
  if (typeof callback == "function") {
   callback(Module);
   continue;
  }
  var func = callback.func;
  if (typeof func === "number") {
   if (callback.arg === undefined) {
    wasmTable.get(func)();
   } else {
    wasmTable.get(func)(callback.arg);
   }
  } else {
   func(callback.arg === undefined ? null : callback.arg);
  }
 }
}

var runtimeKeepaliveCounter = 0;

function keepRuntimeAlive() {
 return noExitRuntime || runtimeKeepaliveCounter > 0;
}

var SYSCALLS = {
 mappings: {},
 buffers: [ null, [], [] ],
 printChar: function(stream, curr) {
  var buffer = SYSCALLS.buffers[stream];
  if (curr === 0 || curr === 10) {
   (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
   buffer.length = 0;
  } else {
   buffer.push(curr);
  }
 },
 varargs: undefined,
 get: function() {
  SYSCALLS.varargs += 4;
  var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
  return ret;
 },
 getStr: function(ptr) {
  var ret = UTF8ToString(ptr);
  return ret;
 },
 get64: function(low, high) {
  return low;
 }
};

function ___sys_fstat64(fd, buf) {}

function ___sys_stat64(path, buf) {}

function _abort() {
 abort();
}

var _emscripten_get_now;

if (ENVIRONMENT_IS_NODE) {
 _emscripten_get_now = function() {
  var t = process["hrtime"]();
  return t[0] * 1e3 + t[1] / 1e6;
 };
} else if (typeof dateNow !== "undefined") {
 _emscripten_get_now = dateNow;
} else _emscripten_get_now = function() {
 return performance.now();
};

function _emscripten_memcpy_big(dest, src, num) {
 HEAPU8.copyWithin(dest, src, src + num);
}

function emscripten_realloc_buffer(size) {
 try {
  wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);
  updateGlobalBufferAndViews(wasmMemory.buffer);
  return 1;
 } catch (e) {}
}

function _emscripten_resize_heap(requestedSize) {
 var oldSize = HEAPU8.length;
 requestedSize = requestedSize >>> 0;
 var maxHeapSize = 2147483648;
 if (requestedSize > maxHeapSize) {
  return false;
 }
 for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
  var overGrownHeapSize = oldSize * (1 + .2 / cutDown);
  overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
  var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
  var replacement = emscripten_realloc_buffer(newSize);
  if (replacement) {
   return true;
  }
 }
 return false;
}

function _exit(status) {
 exit(status);
}

function _fd_fdstat_get(fd, pbuf) {
 var type = fd == 1 || fd == 2 ? 2 : abort();
 HEAP8[pbuf >> 0] = type;
 return 0;
}

function _fd_read(fd, iov, iovcnt, pnum) {
 var stream = SYSCALLS.getStreamFromFD(fd);
 var num = SYSCALLS.doReadv(stream, iov, iovcnt);
 HEAP32[pnum >> 2] = num;
 return 0;
}

function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {}

function _fd_write(fd, iov, iovcnt, pnum) {
 var num = 0;
 for (var i = 0; i < iovcnt; i++) {
  var ptr = HEAP32[iov + i * 8 >> 2];
  var len = HEAP32[iov + (i * 8 + 4) >> 2];
  for (var j = 0; j < len; j++) {
   SYSCALLS.printChar(fd, HEAPU8[ptr + j]);
  }
  num += len;
 }
 HEAP32[pnum >> 2] = num;
 return 0;
}

function _gettimeofday(ptr) {
 var now = Date.now();
 HEAP32[ptr >> 2] = now / 1e3 | 0;
 HEAP32[ptr + 4 >> 2] = now % 1e3 * 1e3 | 0;
 return 0;
}

function _gmtime_r(time, tmPtr) {
 var date = new Date(HEAP32[time >> 2] * 1e3);
 HEAP32[tmPtr >> 2] = date.getUTCSeconds();
 HEAP32[tmPtr + 4 >> 2] = date.getUTCMinutes();
 HEAP32[tmPtr + 8 >> 2] = date.getUTCHours();
 HEAP32[tmPtr + 12 >> 2] = date.getUTCDate();
 HEAP32[tmPtr + 16 >> 2] = date.getUTCMonth();
 HEAP32[tmPtr + 20 >> 2] = date.getUTCFullYear() - 1900;
 HEAP32[tmPtr + 24 >> 2] = date.getUTCDay();
 HEAP32[tmPtr + 36 >> 2] = 0;
 HEAP32[tmPtr + 32 >> 2] = 0;
 var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
 var yday = (date.getTime() - start) / (1e3 * 60 * 60 * 24) | 0;
 HEAP32[tmPtr + 28 >> 2] = yday;
 if (!_gmtime_r.GMTString) _gmtime_r.GMTString = allocateUTF8("GMT");
 HEAP32[tmPtr + 40 >> 2] = _gmtime_r.GMTString;
 return tmPtr;
}

function _jsCloseJavaScriptRefNum() {
 Module.javaScriptInvoke.jsCloseJavaScriptRefNum.apply(undefined, arguments);
}

function _jsExecutionContextFPSync() {
 Module.coreHelpers.jsExecutionContextFPSync.apply(undefined, arguments);
}

function _jsHttpClientAddHeader() {
 Module.httpClient.jsHttpClientAddHeader.apply(undefined, arguments);
}

function _jsHttpClientClose() {
 Module.httpClient.jsHttpClientClose.apply(undefined, arguments);
}

function _jsHttpClientConfigCORS() {
 Module.httpClient.jsHttpClientConfigCORS.apply(undefined, arguments);
}

function _jsHttpClientGetHeader() {
 Module.httpClient.jsHttpClientGetHeader.apply(undefined, arguments);
}

function _jsHttpClientHeaderExists() {
 Module.httpClient.jsHttpClientHeaderExists.apply(undefined, arguments);
}

function _jsHttpClientListHeaders() {
 Module.httpClient.jsHttpClientListHeaders.apply(undefined, arguments);
}

function _jsHttpClientMethod() {
 Module.httpClient.jsHttpClientMethod.apply(undefined, arguments);
}

function _jsHttpClientOpen() {
 Module.httpClient.jsHttpClientOpen.apply(undefined, arguments);
}

function _jsHttpClientRemoveHeader() {
 Module.httpClient.jsHttpClientRemoveHeader.apply(undefined, arguments);
}

function _jsIsNotAJavaScriptRefnum() {
 Module.javaScriptInvoke.jsIsNotAJavaScriptRefnum.apply(undefined, arguments);
}

function _jsJavaScriptInvoke() {
 Module.javaScriptInvoke.jsJavaScriptInvoke.apply(undefined, arguments);
}

function _jsRegisterForControlEvent() {
 Module.eventHelpers.jsRegisterForControlEvent.apply(undefined, arguments);
}

function _jsUnRegisterForControlEvent() {
 Module.eventHelpers.jsUnRegisterForControlEvent.apply(undefined, arguments);
}

function _tzset() {
 if (_tzset.called) return;
 _tzset.called = true;
 var currentYear = new Date().getFullYear();
 var winter = new Date(currentYear, 0, 1);
 var summer = new Date(currentYear, 6, 1);
 var winterOffset = winter.getTimezoneOffset();
 var summerOffset = summer.getTimezoneOffset();
 var stdTimezoneOffset = Math.max(winterOffset, summerOffset);
 HEAP32[__get_timezone() >> 2] = stdTimezoneOffset * 60;
 HEAP32[__get_daylight() >> 2] = Number(winterOffset != summerOffset);
 function extractZone(date) {
  var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
  return match ? match[1] : "GMT";
 }
 var winterName = extractZone(winter);
 var summerName = extractZone(summer);
 var winterNamePtr = allocateUTF8(winterName);
 var summerNamePtr = allocateUTF8(summerName);
 if (summerOffset < winterOffset) {
  HEAP32[__get_tzname() >> 2] = winterNamePtr;
  HEAP32[__get_tzname() + 4 >> 2] = summerNamePtr;
 } else {
  HEAP32[__get_tzname() >> 2] = summerNamePtr;
  HEAP32[__get_tzname() + 4 >> 2] = winterNamePtr;
 }
}

function _localtime_r(time, tmPtr) {
 _tzset();
 var date = new Date(HEAP32[time >> 2] * 1e3);
 HEAP32[tmPtr >> 2] = date.getSeconds();
 HEAP32[tmPtr + 4 >> 2] = date.getMinutes();
 HEAP32[tmPtr + 8 >> 2] = date.getHours();
 HEAP32[tmPtr + 12 >> 2] = date.getDate();
 HEAP32[tmPtr + 16 >> 2] = date.getMonth();
 HEAP32[tmPtr + 20 >> 2] = date.getFullYear() - 1900;
 HEAP32[tmPtr + 24 >> 2] = date.getDay();
 var start = new Date(date.getFullYear(), 0, 1);
 var yday = (date.getTime() - start.getTime()) / (1e3 * 60 * 60 * 24) | 0;
 HEAP32[tmPtr + 28 >> 2] = yday;
 HEAP32[tmPtr + 36 >> 2] = -(date.getTimezoneOffset() * 60);
 var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
 var winterOffset = start.getTimezoneOffset();
 var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset)) | 0;
 HEAP32[tmPtr + 32 >> 2] = dst;
 var zonePtr = HEAP32[__get_tzname() + (dst ? 4 : 0) >> 2];
 HEAP32[tmPtr + 40 >> 2] = zonePtr;
 return tmPtr;
}

var asmLibraryArg = {
 "s": ___sys_fstat64,
 "r": ___sys_stat64,
 "a": _abort,
 "d": _emscripten_get_now,
 "n": _emscripten_memcpy_big,
 "o": _emscripten_resize_heap,
 "k": _exit,
 "p": _fd_fdstat_get,
 "q": _fd_read,
 "m": _fd_seek,
 "e": _fd_write,
 "i": _gettimeofday,
 "j": _gmtime_r,
 "g": _jsCloseJavaScriptRefNum,
 "l": _jsExecutionContextFPSync,
 "A": _jsHttpClientAddHeader,
 "B": _jsHttpClientClose,
 "v": _jsHttpClientConfigCORS,
 "y": _jsHttpClientGetHeader,
 "x": _jsHttpClientHeaderExists,
 "w": _jsHttpClientListHeaders,
 "b": _jsHttpClientMethod,
 "C": _jsHttpClientOpen,
 "z": _jsHttpClientRemoveHeader,
 "f": _jsIsNotAJavaScriptRefnum,
 "u": _jsJavaScriptInvoke,
 "h": _jsRegisterForControlEvent,
 "t": _jsUnRegisterForControlEvent,
 "c": _localtime_r
};

var asm = createWasm();

var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function() {
 return (___wasm_call_ctors = Module["___wasm_call_ctors"] = Module["asm"]["E"]).apply(null, arguments);
};

var _Vireo_MaxExecWakeUpTime = Module["_Vireo_MaxExecWakeUpTime"] = function() {
 return (_Vireo_MaxExecWakeUpTime = Module["_Vireo_MaxExecWakeUpTime"] = Module["asm"]["G"]).apply(null, arguments);
};

var _EggShell_Create = Module["_EggShell_Create"] = function() {
 return (_EggShell_Create = Module["_EggShell_Create"] = Module["asm"]["H"]).apply(null, arguments);
};

var _EggShell_REPL = Module["_EggShell_REPL"] = function() {
 return (_EggShell_REPL = Module["_EggShell_REPL"] = Module["asm"]["I"]).apply(null, arguments);
};

var _EggShell_ExecuteSlices = Module["_EggShell_ExecuteSlices"] = function() {
 return (_EggShell_ExecuteSlices = Module["_EggShell_ExecuteSlices"] = Module["asm"]["J"]).apply(null, arguments);
};

var _EggShell_GetTypeList = Module["_EggShell_GetTypeList"] = function() {
 return (_EggShell_GetTypeList = Module["_EggShell_GetTypeList"] = Module["asm"]["K"]).apply(null, arguments);
};

var _EggShell_Delete = Module["_EggShell_Delete"] = function() {
 return (_EggShell_Delete = Module["_EggShell_Delete"] = Module["asm"]["L"]).apply(null, arguments);
};

var _EggShell_PeekMemory = Module["_EggShell_PeekMemory"] = function() {
 return (_EggShell_PeekMemory = Module["_EggShell_PeekMemory"] = Module["asm"]["M"]).apply(null, arguments);
};

var _EggShell_PokeMemory = Module["_EggShell_PokeMemory"] = function() {
 return (_EggShell_PokeMemory = Module["_EggShell_PokeMemory"] = Module["asm"]["N"]).apply(null, arguments);
};

var _EggShell_AllocateData = Module["_EggShell_AllocateData"] = function() {
 return (_EggShell_AllocateData = Module["_EggShell_AllocateData"] = Module["asm"]["O"]).apply(null, arguments);
};

var _EggShell_DeallocateData = Module["_EggShell_DeallocateData"] = function() {
 return (_EggShell_DeallocateData = Module["_EggShell_DeallocateData"] = Module["asm"]["P"]).apply(null, arguments);
};

var _EggShell_ReinitializeToDefault = Module["_EggShell_ReinitializeToDefault"] = function() {
 return (_EggShell_ReinitializeToDefault = Module["_EggShell_ReinitializeToDefault"] = Module["asm"]["Q"]).apply(null, arguments);
};

var _EggShell_FindValue = Module["_EggShell_FindValue"] = function() {
 return (_EggShell_FindValue = Module["_EggShell_FindValue"] = Module["asm"]["R"]).apply(null, arguments);
};

var _EggShell_FindSubValue = Module["_EggShell_FindSubValue"] = function() {
 return (_EggShell_FindSubValue = Module["_EggShell_FindSubValue"] = Module["asm"]["S"]).apply(null, arguments);
};

var _EggShell_WriteDouble = Module["_EggShell_WriteDouble"] = function() {
 return (_EggShell_WriteDouble = Module["_EggShell_WriteDouble"] = Module["asm"]["T"]).apply(null, arguments);
};

var _EggShell_ReadDouble = Module["_EggShell_ReadDouble"] = function() {
 return (_EggShell_ReadDouble = Module["_EggShell_ReadDouble"] = Module["asm"]["U"]).apply(null, arguments);
};

var _EggShell_WriteValueString = Module["_EggShell_WriteValueString"] = function() {
 return (_EggShell_WriteValueString = Module["_EggShell_WriteValueString"] = Module["asm"]["V"]).apply(null, arguments);
};

var _EggShell_ReadValueString = Module["_EggShell_ReadValueString"] = function() {
 return (_EggShell_ReadValueString = Module["_EggShell_ReadValueString"] = Module["asm"]["W"]).apply(null, arguments);
};

var _EggShell_ResizeArray = Module["_EggShell_ResizeArray"] = function() {
 return (_EggShell_ResizeArray = Module["_EggShell_ResizeArray"] = Module["asm"]["X"]).apply(null, arguments);
};

var _EggShell_GetVariantAttribute = Module["_EggShell_GetVariantAttribute"] = function() {
 return (_EggShell_GetVariantAttribute = Module["_EggShell_GetVariantAttribute"] = Module["asm"]["Y"]).apply(null, arguments);
};

var _EggShell_SetVariantAttribute = Module["_EggShell_SetVariantAttribute"] = function() {
 return (_EggShell_SetVariantAttribute = Module["_EggShell_SetVariantAttribute"] = Module["asm"]["Z"]).apply(null, arguments);
};

var _EggShell_DeleteVariantAttribute = Module["_EggShell_DeleteVariantAttribute"] = function() {
 return (_EggShell_DeleteVariantAttribute = Module["_EggShell_DeleteVariantAttribute"] = Module["asm"]["_"]).apply(null, arguments);
};

var _Data_GetStringBegin = Module["_Data_GetStringBegin"] = function() {
 return (_Data_GetStringBegin = Module["_Data_GetStringBegin"] = Module["asm"]["$"]).apply(null, arguments);
};

var _Data_GetStringLength = Module["_Data_GetStringLength"] = function() {
 return (_Data_GetStringLength = Module["_Data_GetStringLength"] = Module["asm"]["aa"]).apply(null, arguments);
};

var _Data_GetArrayBegin = Module["_Data_GetArrayBegin"] = function() {
 return (_Data_GetArrayBegin = Module["_Data_GetArrayBegin"] = Module["asm"]["ba"]).apply(null, arguments);
};

var _Data_GetArrayDimensions = Module["_Data_GetArrayDimensions"] = function() {
 return (_Data_GetArrayDimensions = Module["_Data_GetArrayDimensions"] = Module["asm"]["ca"]).apply(null, arguments);
};

var _Data_GetArrayLength = Module["_Data_GetArrayLength"] = function() {
 return (_Data_GetArrayLength = Module["_Data_GetArrayLength"] = Module["asm"]["da"]).apply(null, arguments);
};

var _TypeManager_Define = Module["_TypeManager_Define"] = function() {
 return (_TypeManager_Define = Module["_TypeManager_Define"] = Module["asm"]["ea"]).apply(null, arguments);
};

var _TypeManager_FindType = Module["_TypeManager_FindType"] = function() {
 return (_TypeManager_FindType = Module["_TypeManager_FindType"] = Module["asm"]["fa"]).apply(null, arguments);
};

var _TypeRef_TopAQSize = Module["_TypeRef_TopAQSize"] = function() {
 return (_TypeRef_TopAQSize = Module["_TypeRef_TopAQSize"] = Module["asm"]["ga"]).apply(null, arguments);
};

var _TypeRef_IsFlat = Module["_TypeRef_IsFlat"] = function() {
 return (_TypeRef_IsFlat = Module["_TypeRef_IsFlat"] = Module["asm"]["ha"]).apply(null, arguments);
};

var _TypeRef_IsValid = Module["_TypeRef_IsValid"] = function() {
 return (_TypeRef_IsValid = Module["_TypeRef_IsValid"] = Module["asm"]["ia"]).apply(null, arguments);
};

var _TypeRef_HasCustomDefault = Module["_TypeRef_HasCustomDefault"] = function() {
 return (_TypeRef_HasCustomDefault = Module["_TypeRef_HasCustomDefault"] = Module["asm"]["ja"]).apply(null, arguments);
};

var _TypeRef_BitEncoding = Module["_TypeRef_BitEncoding"] = function() {
 return (_TypeRef_BitEncoding = Module["_TypeRef_BitEncoding"] = Module["asm"]["ka"]).apply(null, arguments);
};

var _TypeRef_Alignment = Module["_TypeRef_Alignment"] = function() {
 return (_TypeRef_Alignment = Module["_TypeRef_Alignment"] = Module["asm"]["la"]).apply(null, arguments);
};

var _TypeRef_Name = Module["_TypeRef_Name"] = function() {
 return (_TypeRef_Name = Module["_TypeRef_Name"] = Module["asm"]["ma"]).apply(null, arguments);
};

var _TypeRef_ElementName = Module["_TypeRef_ElementName"] = function() {
 return (_TypeRef_ElementName = Module["_TypeRef_ElementName"] = Module["asm"]["na"]).apply(null, arguments);
};

var _TypeRef_ElementOffset = Module["_TypeRef_ElementOffset"] = function() {
 return (_TypeRef_ElementOffset = Module["_TypeRef_ElementOffset"] = Module["asm"]["oa"]).apply(null, arguments);
};

var _TypeRef_Rank = Module["_TypeRef_Rank"] = function() {
 return (_TypeRef_Rank = Module["_TypeRef_Rank"] = Module["asm"]["pa"]).apply(null, arguments);
};

var _TypeRef_PointerType = Module["_TypeRef_PointerType"] = function() {
 return (_TypeRef_PointerType = Module["_TypeRef_PointerType"] = Module["asm"]["qa"]).apply(null, arguments);
};

var _TypeRef_Next = Module["_TypeRef_Next"] = function() {
 return (_TypeRef_Next = Module["_TypeRef_Next"] = Module["asm"]["ra"]).apply(null, arguments);
};

var _TypeRef_ElementUsageType = Module["_TypeRef_ElementUsageType"] = function() {
 return (_TypeRef_ElementUsageType = Module["_TypeRef_ElementUsageType"] = Module["asm"]["sa"]).apply(null, arguments);
};

var _TypeRef_SubElementCount = Module["_TypeRef_SubElementCount"] = function() {
 return (_TypeRef_SubElementCount = Module["_TypeRef_SubElementCount"] = Module["asm"]["ta"]).apply(null, arguments);
};

var _TypeRef_GetSubElementByIndex = Module["_TypeRef_GetSubElementByIndex"] = function() {
 return (_TypeRef_GetSubElementByIndex = Module["_TypeRef_GetSubElementByIndex"] = Module["asm"]["ua"]).apply(null, arguments);
};

var _TypeRef_IsCluster = Module["_TypeRef_IsCluster"] = function() {
 return (_TypeRef_IsCluster = Module["_TypeRef_IsCluster"] = Module["asm"]["va"]).apply(null, arguments);
};

var _TypeRef_IsArray = Module["_TypeRef_IsArray"] = function() {
 return (_TypeRef_IsArray = Module["_TypeRef_IsArray"] = Module["asm"]["wa"]).apply(null, arguments);
};

var _TypeRef_IsBoolean = Module["_TypeRef_IsBoolean"] = function() {
 return (_TypeRef_IsBoolean = Module["_TypeRef_IsBoolean"] = Module["asm"]["xa"]).apply(null, arguments);
};

var _TypeRef_IsInteger = Module["_TypeRef_IsInteger"] = function() {
 return (_TypeRef_IsInteger = Module["_TypeRef_IsInteger"] = Module["asm"]["ya"]).apply(null, arguments);
};

var _TypeRef_IsSigned = Module["_TypeRef_IsSigned"] = function() {
 return (_TypeRef_IsSigned = Module["_TypeRef_IsSigned"] = Module["asm"]["za"]).apply(null, arguments);
};

var _TypeRef_IsEnum = Module["_TypeRef_IsEnum"] = function() {
 return (_TypeRef_IsEnum = Module["_TypeRef_IsEnum"] = Module["asm"]["Aa"]).apply(null, arguments);
};

var _TypeRef_IsFloat = Module["_TypeRef_IsFloat"] = function() {
 return (_TypeRef_IsFloat = Module["_TypeRef_IsFloat"] = Module["asm"]["Ba"]).apply(null, arguments);
};

var _TypeRef_IsString = Module["_TypeRef_IsString"] = function() {
 return (_TypeRef_IsString = Module["_TypeRef_IsString"] = Module["asm"]["Ca"]).apply(null, arguments);
};

var _TypeRef_IsPath = Module["_TypeRef_IsPath"] = function() {
 return (_TypeRef_IsPath = Module["_TypeRef_IsPath"] = Module["asm"]["Da"]).apply(null, arguments);
};

var _TypeRef_IsTimestamp = Module["_TypeRef_IsTimestamp"] = function() {
 return (_TypeRef_IsTimestamp = Module["_TypeRef_IsTimestamp"] = Module["asm"]["Ea"]).apply(null, arguments);
};

var _TypeRef_IsComplex = Module["_TypeRef_IsComplex"] = function() {
 return (_TypeRef_IsComplex = Module["_TypeRef_IsComplex"] = Module["asm"]["Fa"]).apply(null, arguments);
};

var _TypeRef_IsAnalogWaveform = Module["_TypeRef_IsAnalogWaveform"] = function() {
 return (_TypeRef_IsAnalogWaveform = Module["_TypeRef_IsAnalogWaveform"] = Module["asm"]["Ga"]).apply(null, arguments);
};

var _TypeRef_IsJavaScriptStaticRefNum = Module["_TypeRef_IsJavaScriptStaticRefNum"] = function() {
 return (_TypeRef_IsJavaScriptStaticRefNum = Module["_TypeRef_IsJavaScriptStaticRefNum"] = Module["asm"]["Ha"]).apply(null, arguments);
};

var _TypeRef_IsJavaScriptDynamicRefNum = Module["_TypeRef_IsJavaScriptDynamicRefNum"] = function() {
 return (_TypeRef_IsJavaScriptDynamicRefNum = Module["_TypeRef_IsJavaScriptDynamicRefNum"] = Module["asm"]["Ia"]).apply(null, arguments);
};

var _TypeRef_TestNeedsUpdateAndReset = Module["_TypeRef_TestNeedsUpdateAndReset"] = function() {
 return (_TypeRef_TestNeedsUpdateAndReset = Module["_TypeRef_TestNeedsUpdateAndReset"] = Module["asm"]["Ja"]).apply(null, arguments);
};

var _TypeRef_TestNeedsUpdateWithoutReset = Module["_TypeRef_TestNeedsUpdateWithoutReset"] = function() {
 return (_TypeRef_TestNeedsUpdateWithoutReset = Module["_TypeRef_TestNeedsUpdateWithoutReset"] = Module["asm"]["Ka"]).apply(null, arguments);
};

var _Data_RawBlockSize = Module["_Data_RawBlockSize"] = function() {
 return (_Data_RawBlockSize = Module["_Data_RawBlockSize"] = Module["asm"]["La"]).apply(null, arguments);
};

var _Data_Length = Module["_Data_Length"] = function() {
 return (_Data_Length = Module["_Data_Length"] = Module["asm"]["Ma"]).apply(null, arguments);
};

var _Data_Type = Module["_Data_Type"] = function() {
 return (_Data_Type = Module["_Data_Type"] = Module["asm"]["Na"]).apply(null, arguments);
};

var _Data_GetLength = Module["_Data_GetLength"] = function() {
 return (_Data_GetLength = Module["_Data_GetLength"] = Module["asm"]["Oa"]).apply(null, arguments);
};

var _Data_Resize1D = Module["_Data_Resize1D"] = function() {
 return (_Data_Resize1D = Module["_Data_Resize1D"] = Module["asm"]["Pa"]).apply(null, arguments);
};

var _Data_ResizeDimensions = Module["_Data_ResizeDimensions"] = function() {
 return (_Data_ResizeDimensions = Module["_Data_ResizeDimensions"] = Module["asm"]["Qa"]).apply(null, arguments);
};

var _Data_RawPointerFromOffset = Module["_Data_RawPointerFromOffset"] = function() {
 return (_Data_RawPointerFromOffset = Module["_Data_RawPointerFromOffset"] = Module["asm"]["Ra"]).apply(null, arguments);
};

var _Data_Read1Byte = Module["_Data_Read1Byte"] = function() {
 return (_Data_Read1Byte = Module["_Data_Read1Byte"] = Module["asm"]["Sa"]).apply(null, arguments);
};

var _Data_Write1Byte = Module["_Data_Write1Byte"] = function() {
 return (_Data_Write1Byte = Module["_Data_Write1Byte"] = Module["asm"]["Ta"]).apply(null, arguments);
};

var _Data_Read2Bytes = Module["_Data_Read2Bytes"] = function() {
 return (_Data_Read2Bytes = Module["_Data_Read2Bytes"] = Module["asm"]["Ua"]).apply(null, arguments);
};

var _Data_Write2Bytes = Module["_Data_Write2Bytes"] = function() {
 return (_Data_Write2Bytes = Module["_Data_Write2Bytes"] = Module["asm"]["Va"]).apply(null, arguments);
};

var _Data_Read4Bytes = Module["_Data_Read4Bytes"] = function() {
 return (_Data_Read4Bytes = Module["_Data_Read4Bytes"] = Module["asm"]["Wa"]).apply(null, arguments);
};

var _Data_Write4Bytes = Module["_Data_Write4Bytes"] = function() {
 return (_Data_Write4Bytes = Module["_Data_Write4Bytes"] = Module["asm"]["Xa"]).apply(null, arguments);
};

var _Data_Read8Bytes = Module["_Data_Read8Bytes"] = function() {
 return (_Data_Read8Bytes = Module["_Data_Read8Bytes"] = Module["asm"]["Ya"]).apply(null, arguments);
};

var _Data_Write8Bytes = Module["_Data_Write8Bytes"] = function() {
 return (_Data_Write8Bytes = Module["_Data_Write8Bytes"] = Module["asm"]["Za"]).apply(null, arguments);
};

var _Data_ReadPointer = Module["_Data_ReadPointer"] = function() {
 return (_Data_ReadPointer = Module["_Data_ReadPointer"] = Module["asm"]["_a"]).apply(null, arguments);
};

var _Data_WritePointer = Module["_Data_WritePointer"] = function() {
 return (_Data_WritePointer = Module["_Data_WritePointer"] = Module["asm"]["$a"]).apply(null, arguments);
};

var _Data_ReadBytes = Module["_Data_ReadBytes"] = function() {
 return (_Data_ReadBytes = Module["_Data_ReadBytes"] = Module["asm"]["ab"]).apply(null, arguments);
};

var _Data_WriteBytes = Module["_Data_WriteBytes"] = function() {
 return (_Data_WriteBytes = Module["_Data_WriteBytes"] = Module["asm"]["bb"]).apply(null, arguments);
};

var _Occurrence_Set = Module["_Occurrence_Set"] = function() {
 return (_Occurrence_Set = Module["_Occurrence_Set"] = Module["asm"]["cb"]).apply(null, arguments);
};

var _OccurEvent = Module["_OccurEvent"] = function() {
 return (_OccurEvent = Module["_OccurEvent"] = Module["asm"]["db"]).apply(null, arguments);
};

var _malloc = Module["_malloc"] = function() {
 return (_malloc = Module["_malloc"] = Module["asm"]["eb"]).apply(null, arguments);
};

var _free = Module["_free"] = function() {
 return (_free = Module["_free"] = Module["asm"]["fb"]).apply(null, arguments);
};

var _JavaScriptInvoke_GetParameterDataRef = Module["_JavaScriptInvoke_GetParameterDataRef"] = function() {
 return (_JavaScriptInvoke_GetParameterDataRef = Module["_JavaScriptInvoke_GetParameterDataRef"] = Module["asm"]["gb"]).apply(null, arguments);
};

var _JavaScriptInvoke_GetParameterTypeRef = Module["_JavaScriptInvoke_GetParameterTypeRef"] = function() {
 return (_JavaScriptInvoke_GetParameterTypeRef = Module["_JavaScriptInvoke_GetParameterTypeRef"] = Module["asm"]["hb"]).apply(null, arguments);
};

var __get_tzname = Module["__get_tzname"] = function() {
 return (__get_tzname = Module["__get_tzname"] = Module["asm"]["ib"]).apply(null, arguments);
};

var __get_daylight = Module["__get_daylight"] = function() {
 return (__get_daylight = Module["__get_daylight"] = Module["asm"]["jb"]).apply(null, arguments);
};

var __get_timezone = Module["__get_timezone"] = function() {
 return (__get_timezone = Module["__get_timezone"] = Module["asm"]["kb"]).apply(null, arguments);
};

var stackSave = Module["stackSave"] = function() {
 return (stackSave = Module["stackSave"] = Module["asm"]["lb"]).apply(null, arguments);
};

var stackRestore = Module["stackRestore"] = function() {
 return (stackRestore = Module["stackRestore"] = Module["asm"]["mb"]).apply(null, arguments);
};

var stackAlloc = Module["stackAlloc"] = function() {
 return (stackAlloc = Module["stackAlloc"] = Module["asm"]["nb"]).apply(null, arguments);
};

Module["setValue"] = setValue;

Module["getValue"] = getValue;

Module["stringToUTF8"] = stringToUTF8;

Module["lengthBytesUTF8"] = lengthBytesUTF8;

Module["stackSave"] = stackSave;

Module["stackRestore"] = stackRestore;

Module["stackAlloc"] = stackAlloc;

var calledRun;

function ExitStatus(status) {
 this.name = "ExitStatus";
 this.message = "Program terminated with exit(" + status + ")";
 this.status = status;
}

dependenciesFulfilled = function runCaller() {
 if (!calledRun) run();
 if (!calledRun) dependenciesFulfilled = runCaller;
};

function run(args) {
 args = args || arguments_;
 if (runDependencies > 0) {
  return;
 }
 preRun();
 if (runDependencies > 0) {
  return;
 }
 function doRun() {
  if (calledRun) return;
  calledRun = true;
  Module["calledRun"] = true;
  if (ABORT) return;
  initRuntime();
  readyPromiseResolve(Module);
  if (Module["onRuntimeInitialized"]) Module["onRuntimeInitialized"]();
  postRun();
 }
 if (Module["setStatus"]) {
  Module["setStatus"]("Running...");
  setTimeout(function() {
   setTimeout(function() {
    Module["setStatus"]("");
   }, 1);
   doRun();
  }, 1);
 } else {
  doRun();
 }
}

Module["run"] = run;

function exit(status, implicit) {
 EXITSTATUS = status;
 if (implicit && keepRuntimeAlive() && status === 0) {
  return;
 }
 if (keepRuntimeAlive()) {} else {
  exitRuntime();
  if (Module["onExit"]) Module["onExit"](status);
  ABORT = true;
 }
 quit_(status, new ExitStatus(status));
}

if (Module["preInit"]) {
 if (typeof Module["preInit"] == "function") Module["preInit"] = [ Module["preInit"] ];
 while (Module["preInit"].length > 0) {
  Module["preInit"].pop()();
 }
}

run();

Module.vireopostjs = function() {};


  return VireoCreateCoreModule.ready
}
);
})();
export default VireoCreateCoreModule;