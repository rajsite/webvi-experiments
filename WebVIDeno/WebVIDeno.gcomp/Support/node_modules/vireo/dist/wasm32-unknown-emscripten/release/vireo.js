(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define('vireoHelpers', factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.vireoHelpers = factory());
}(this, (function () { 'use strict';

  var VireoCreateCoreModule = (function() {
    var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
    if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;
    return (
  function(VireoCreateCoreModule) {
    VireoCreateCoreModule = VireoCreateCoreModule || {};

  var Module = typeof VireoCreateCoreModule !== "undefined" ? VireoCreateCoreModule : {};

  var readyPromiseResolve, readyPromiseReject;

  Module["ready"] = new Promise(function(resolve, reject) {
   readyPromiseResolve = resolve;
   readyPromiseReject = reject;
  });

  Module.vireoprejs = function() {};

  var moduleOverrides = {};

  var key;

  for (key in Module) {
   if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
   }
  }

  var quit_ = function(status, toThrow) {
   throw toThrow;
  };

  var ENVIRONMENT_IS_WEB = false;

  var ENVIRONMENT_IS_WORKER = false;

  var ENVIRONMENT_IS_NODE = false;

  var ENVIRONMENT_IS_SHELL = false;

  ENVIRONMENT_IS_WEB = typeof window === "object";

  ENVIRONMENT_IS_WORKER = typeof importScripts === "function";

  ENVIRONMENT_IS_NODE = typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node === "string";

  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

  var scriptDirectory = "";

  function locateFile(path) {
   if (Module["locateFile"]) {
    return Module["locateFile"](path, scriptDirectory);
   }
   return scriptDirectory + path;
  }

  var read_, readAsync, readBinary;

  var nodeFS;

  var nodePath;

  if (ENVIRONMENT_IS_NODE) {
   if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require("path").dirname(scriptDirectory) + "/";
   } else {
    scriptDirectory = __dirname + "/";
   }
   read_ = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require("fs");
    if (!nodePath) nodePath = require("path");
    filename = nodePath["normalize"](filename);
    return nodeFS["readFileSync"](filename, binary ? null : "utf8");
   };
   readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
     ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
   };
   if (process["argv"].length > 1) {
    process["argv"][1].replace(/\\/g, "/");
   }
   process["argv"].slice(2);
   process["on"]("uncaughtException", function(ex) {
    if (!(ex instanceof ExitStatus)) {
     throw ex;
    }
   });
   process["on"]("unhandledRejection", abort);
   quit_ = function(status) {
    process["exit"](status);
   };
   Module["inspect"] = function() {
    return "[Emscripten Module object]";
   };
  } else if (ENVIRONMENT_IS_SHELL) {
   if (typeof read != "undefined") {
    read_ = function shell_read(f) {
     return read(f);
    };
   }
   readBinary = function readBinary(f) {
    var data;
    if (typeof readbuffer === "function") {
     return new Uint8Array(readbuffer(f));
    }
    data = read(f, "binary");
    assert(typeof data === "object");
    return data;
   };
   if (typeof scriptArgs != "undefined") {
    scriptArgs;
   }
   if (typeof quit === "function") {
    quit_ = function(status) {
     quit(status);
    };
   }
   if (typeof print !== "undefined") {
    if (typeof console === "undefined") console = {};
    console.log = print;
    console.warn = console.error = typeof printErr !== "undefined" ? printErr : print;
   }
  } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
   if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = self.location.href;
   } else if (typeof document !== "undefined" && document.currentScript) {
    scriptDirectory = document.currentScript.src;
   }
   if (_scriptDir) {
    scriptDirectory = _scriptDir;
   }
   if (scriptDirectory.indexOf("blob:") !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf("/") + 1);
   } else {
    scriptDirectory = "";
   }
   {
    read_ = function(url) {
     var xhr = new XMLHttpRequest();
     xhr.open("GET", url, false);
     xhr.send(null);
     return xhr.responseText;
    };
    if (ENVIRONMENT_IS_WORKER) {
     readBinary = function(url) {
      var xhr = new XMLHttpRequest();
      xhr.open("GET", url, false);
      xhr.responseType = "arraybuffer";
      xhr.send(null);
      return new Uint8Array(xhr.response);
     };
    }
    readAsync = function(url, onload, onerror) {
     var xhr = new XMLHttpRequest();
     xhr.open("GET", url, true);
     xhr.responseType = "arraybuffer";
     xhr.onload = function() {
      if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
       onload(xhr.response);
       return;
      }
      onerror();
     };
     xhr.onerror = onerror;
     xhr.send(null);
    };
   }
  } else ;

  var out = Module["print"] || console.log.bind(console);

  var err = Module["printErr"] || console.warn.bind(console);

  for (key in moduleOverrides) {
   if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
   }
  }

  moduleOverrides = null;

  if (Module["arguments"]) Module["arguments"];

  if (Module["thisProgram"]) Module["thisProgram"];

  if (Module["quit"]) quit_ = Module["quit"];

  var wasmBinary;

  if (Module["wasmBinary"]) wasmBinary = Module["wasmBinary"];

  var noExitRuntime = Module["noExitRuntime"] || true;

  if (typeof WebAssembly !== "object") {
   abort("no native wasm support detected");
  }

  function setValue(ptr, value, type, noSafe) {
   type = type || "i8";
   if (type.charAt(type.length - 1) === "*") type = "i32";
   switch (type) {
   case "i1":
    HEAP8[ptr >> 0] = value;
    break;

   case "i8":
    HEAP8[ptr >> 0] = value;
    break;

   case "i16":
    HEAP16[ptr >> 1] = value;
    break;

   case "i32":
    HEAP32[ptr >> 2] = value;
    break;

   case "i64":
    tempI64 = [ value >>> 0, (tempDouble = value, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0) ], 
    HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
    break;

   case "float":
    HEAPF32[ptr >> 2] = value;
    break;

   case "double":
    HEAPF64[ptr >> 3] = value;
    break;

   default:
    abort("invalid type for setValue: " + type);
   }
  }

  function getValue(ptr, type, noSafe) {
   type = type || "i8";
   if (type.charAt(type.length - 1) === "*") type = "i32";
   switch (type) {
   case "i1":
    return HEAP8[ptr >> 0];

   case "i8":
    return HEAP8[ptr >> 0];

   case "i16":
    return HEAP16[ptr >> 1];

   case "i32":
    return HEAP32[ptr >> 2];

   case "i64":
    return HEAP32[ptr >> 2];

   case "float":
    return HEAPF32[ptr >> 2];

   case "double":
    return HEAPF64[ptr >> 3];

   default:
    abort("invalid type for getValue: " + type);
   }
   return null;
  }

  var wasmMemory;

  var ABORT = false;

  function assert(condition, text) {
   if (!condition) {
    abort("Assertion failed: " + text);
   }
  }

  var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : undefined;

  function UTF8ArrayToString(heap, idx, maxBytesToRead) {
   var endIdx = idx + maxBytesToRead;
   var endPtr = idx;
   while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;
   if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
   } else {
    var str = "";
    while (idx < endPtr) {
     var u0 = heap[idx++];
     if (!(u0 & 128)) {
      str += String.fromCharCode(u0);
      continue;
     }
     var u1 = heap[idx++] & 63;
     if ((u0 & 224) == 192) {
      str += String.fromCharCode((u0 & 31) << 6 | u1);
      continue;
     }
     var u2 = heap[idx++] & 63;
     if ((u0 & 240) == 224) {
      u0 = (u0 & 15) << 12 | u1 << 6 | u2;
     } else {
      u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63;
     }
     if (u0 < 65536) {
      str += String.fromCharCode(u0);
     } else {
      var ch = u0 - 65536;
      str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
     }
    }
   }
   return str;
  }

  function UTF8ToString(ptr, maxBytesToRead) {
   return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
  }

  function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
   if (!(maxBytesToWrite > 0)) return 0;
   var startIdx = outIdx;
   var endIdx = outIdx + maxBytesToWrite - 1;
   for (var i = 0; i < str.length; ++i) {
    var u = str.charCodeAt(i);
    if (u >= 55296 && u <= 57343) {
     var u1 = str.charCodeAt(++i);
     u = 65536 + ((u & 1023) << 10) | u1 & 1023;
    }
    if (u <= 127) {
     if (outIdx >= endIdx) break;
     heap[outIdx++] = u;
    } else if (u <= 2047) {
     if (outIdx + 1 >= endIdx) break;
     heap[outIdx++] = 192 | u >> 6;
     heap[outIdx++] = 128 | u & 63;
    } else if (u <= 65535) {
     if (outIdx + 2 >= endIdx) break;
     heap[outIdx++] = 224 | u >> 12;
     heap[outIdx++] = 128 | u >> 6 & 63;
     heap[outIdx++] = 128 | u & 63;
    } else {
     if (outIdx + 3 >= endIdx) break;
     heap[outIdx++] = 240 | u >> 18;
     heap[outIdx++] = 128 | u >> 12 & 63;
     heap[outIdx++] = 128 | u >> 6 & 63;
     heap[outIdx++] = 128 | u & 63;
    }
   }
   heap[outIdx] = 0;
   return outIdx - startIdx;
  }

  function stringToUTF8(str, outPtr, maxBytesToWrite) {
   return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
  }

  function lengthBytesUTF8(str) {
   var len = 0;
   for (var i = 0; i < str.length; ++i) {
    var u = str.charCodeAt(i);
    if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
    if (u <= 127) ++len; else if (u <= 2047) len += 2; else if (u <= 65535) len += 3; else len += 4;
   }
   return len;
  }

  function allocateUTF8(str) {
   var size = lengthBytesUTF8(str) + 1;
   var ret = _malloc(size);
   if (ret) stringToUTF8Array(str, HEAP8, ret, size);
   return ret;
  }

  function alignUp(x, multiple) {
   if (x % multiple > 0) {
    x += multiple - x % multiple;
   }
   return x;
  }

  var buffer, HEAP8, HEAPU8, HEAP16, HEAP32, HEAPF32, HEAPF64;

  function updateGlobalBufferAndViews(buf) {
   buffer = buf;
   Module["HEAP8"] = HEAP8 = new Int8Array(buf);
   Module["HEAP16"] = HEAP16 = new Int16Array(buf);
   Module["HEAP32"] = HEAP32 = new Int32Array(buf);
   Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
   Module["HEAPU16"] = new Uint16Array(buf);
   Module["HEAPU32"] = new Uint32Array(buf);
   Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
   Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
  }

  var INITIAL_MEMORY = Module["INITIAL_MEMORY"] || 16777216;

  var wasmTable;

  var __ATPRERUN__ = [];

  var __ATINIT__ = [];

  var __ATPOSTRUN__ = [];

  function preRun() {
   if (Module["preRun"]) {
    if (typeof Module["preRun"] == "function") Module["preRun"] = [ Module["preRun"] ];
    while (Module["preRun"].length) {
     addOnPreRun(Module["preRun"].shift());
    }
   }
   callRuntimeCallbacks(__ATPRERUN__);
  }

  function initRuntime() {
   callRuntimeCallbacks(__ATINIT__);
  }

  function postRun() {
   if (Module["postRun"]) {
    if (typeof Module["postRun"] == "function") Module["postRun"] = [ Module["postRun"] ];
    while (Module["postRun"].length) {
     addOnPostRun(Module["postRun"].shift());
    }
   }
   callRuntimeCallbacks(__ATPOSTRUN__);
  }

  function addOnPreRun(cb) {
   __ATPRERUN__.unshift(cb);
  }

  function addOnInit(cb) {
   __ATINIT__.unshift(cb);
  }

  function addOnPostRun(cb) {
   __ATPOSTRUN__.unshift(cb);
  }

  var runDependencies = 0;

  var dependenciesFulfilled = null;

  function addRunDependency(id) {
   runDependencies++;
   if (Module["monitorRunDependencies"]) {
    Module["monitorRunDependencies"](runDependencies);
   }
  }

  function removeRunDependency(id) {
   runDependencies--;
   if (Module["monitorRunDependencies"]) {
    Module["monitorRunDependencies"](runDependencies);
   }
   if (runDependencies == 0) {
    if (dependenciesFulfilled) {
     var callback = dependenciesFulfilled;
     dependenciesFulfilled = null;
     callback();
    }
   }
  }

  Module["preloadedImages"] = {};

  Module["preloadedAudios"] = {};

  function abort(what) {
   if (Module["onAbort"]) {
    Module["onAbort"](what);
   }
   what += "";
   err(what);
   ABORT = true;
   what = "abort(" + what + "). Build with -s ASSERTIONS=1 for more info.";
   var e = new WebAssembly.RuntimeError(what);
   readyPromiseReject(e);
   throw e;
  }

  var dataURIPrefix = "data:application/octet-stream;base64,";

  function isDataURI(filename) {
   return filename.startsWith(dataURIPrefix);
  }

  function isFileURI(filename) {
   return filename.startsWith("file://");
  }

  var wasmBinaryFile = "vireo.core.wasm";

  if (!isDataURI(wasmBinaryFile)) {
   wasmBinaryFile = locateFile(wasmBinaryFile);
  }

  function getBinary(file) {
   try {
    if (file == wasmBinaryFile && wasmBinary) {
     return new Uint8Array(wasmBinary);
    }
    if (readBinary) {
     return readBinary(file);
    } else {
     throw "both async and sync fetching of the wasm failed";
    }
   } catch (err) {
    abort(err);
   }
  }

  function getBinaryPromise() {
   if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch === "function" && !isFileURI(wasmBinaryFile)) {
     return fetch(wasmBinaryFile, {
      credentials: "same-origin"
     }).then(function(response) {
      if (!response["ok"]) {
       throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response["arrayBuffer"]();
     }).catch(function() {
      return getBinary(wasmBinaryFile);
     });
    } else {
     if (readAsync) {
      return new Promise(function(resolve, reject) {
       readAsync(wasmBinaryFile, function(response) {
        resolve(new Uint8Array(response));
       }, reject);
      });
     }
    }
   }
   return Promise.resolve().then(function() {
    return getBinary(wasmBinaryFile);
   });
  }

  function createWasm() {
   var info = {
    "a": asmLibraryArg
   };
   function receiveInstance(instance, module) {
    var exports = instance.exports;
    Module["asm"] = exports;
    wasmMemory = Module["asm"]["D"];
    updateGlobalBufferAndViews(wasmMemory.buffer);
    wasmTable = Module["asm"]["F"];
    addOnInit(Module["asm"]["E"]);
    removeRunDependency();
   }
   addRunDependency();
   function receiveInstantiationResult(result) {
    receiveInstance(result["instance"]);
   }
   function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
     var result = WebAssembly.instantiate(binary, info);
     return result;
    }).then(receiver, function(reason) {
     err("failed to asynchronously prepare wasm: " + reason);
     abort(reason);
    });
   }
   function instantiateAsync() {
    if (!wasmBinary && typeof WebAssembly.instantiateStreaming === "function" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && typeof fetch === "function") {
     return fetch(wasmBinaryFile, {
      credentials: "same-origin"
     }).then(function(response) {
      var result = WebAssembly.instantiateStreaming(response, info);
      return result.then(receiveInstantiationResult, function(reason) {
       err("wasm streaming compile failed: " + reason);
       err("falling back to ArrayBuffer instantiation");
       return instantiateArrayBuffer(receiveInstantiationResult);
      });
     });
    } else {
     return instantiateArrayBuffer(receiveInstantiationResult);
    }
   }
   if (Module["instantiateWasm"]) {
    try {
     var exports = Module["instantiateWasm"](info, receiveInstance);
     return exports;
    } catch (e) {
     err("Module.instantiateWasm callback failed with error: " + e);
     return false;
    }
   }
   instantiateAsync().catch(readyPromiseReject);
   return {};
  }

  var tempDouble;

  var tempI64;

  function callRuntimeCallbacks(callbacks) {
   while (callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == "function") {
     callback(Module);
     continue;
    }
    var func = callback.func;
    if (typeof func === "number") {
     if (callback.arg === undefined) {
      wasmTable.get(func)();
     } else {
      wasmTable.get(func)(callback.arg);
     }
    } else {
     func(callback.arg === undefined ? null : callback.arg);
    }
   }
  }

  var runtimeKeepaliveCounter = 0;

  function keepRuntimeAlive() {
   return noExitRuntime || runtimeKeepaliveCounter > 0;
  }

  var SYSCALLS = {
   mappings: {},
   buffers: [ null, [], [] ],
   printChar: function(stream, curr) {
    var buffer = SYSCALLS.buffers[stream];
    if (curr === 0 || curr === 10) {
     (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
     buffer.length = 0;
    } else {
     buffer.push(curr);
    }
   },
   varargs: undefined,
   get: function() {
    SYSCALLS.varargs += 4;
    var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
    return ret;
   },
   getStr: function(ptr) {
    var ret = UTF8ToString(ptr);
    return ret;
   },
   get64: function(low, high) {
    return low;
   }
  };

  function ___sys_fstat64(fd, buf) {}

  function ___sys_stat64(path, buf) {}

  function _abort() {
   abort();
  }

  var _emscripten_get_now;

  if (ENVIRONMENT_IS_NODE) {
   _emscripten_get_now = function() {
    var t = process["hrtime"]();
    return t[0] * 1e3 + t[1] / 1e6;
   };
  } else if (typeof dateNow !== "undefined") {
   _emscripten_get_now = dateNow;
  } else _emscripten_get_now = function() {
   return performance.now();
  };

  function _emscripten_memcpy_big(dest, src, num) {
   HEAPU8.copyWithin(dest, src, src + num);
  }

  function emscripten_realloc_buffer(size) {
   try {
    wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);
    updateGlobalBufferAndViews(wasmMemory.buffer);
    return 1;
   } catch (e) {}
  }

  function _emscripten_resize_heap(requestedSize) {
   var oldSize = HEAPU8.length;
   requestedSize = requestedSize >>> 0;
   var maxHeapSize = 2147483648;
   if (requestedSize > maxHeapSize) {
    return false;
   }
   for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
    var overGrownHeapSize = oldSize * (1 + .2 / cutDown);
    overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
    var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
    var replacement = emscripten_realloc_buffer(newSize);
    if (replacement) {
     return true;
    }
   }
   return false;
  }

  function _exit(status) {
   exit(status);
  }

  function _fd_fdstat_get(fd, pbuf) {
   var type = fd == 1 || fd == 2 ? 2 : abort();
   HEAP8[pbuf >> 0] = type;
   return 0;
  }

  function _fd_read(fd, iov, iovcnt, pnum) {
   var stream = SYSCALLS.getStreamFromFD(fd);
   var num = SYSCALLS.doReadv(stream, iov, iovcnt);
   HEAP32[pnum >> 2] = num;
   return 0;
  }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {}

  function _fd_write(fd, iov, iovcnt, pnum) {
   var num = 0;
   for (var i = 0; i < iovcnt; i++) {
    var ptr = HEAP32[iov + i * 8 >> 2];
    var len = HEAP32[iov + (i * 8 + 4) >> 2];
    for (var j = 0; j < len; j++) {
     SYSCALLS.printChar(fd, HEAPU8[ptr + j]);
    }
    num += len;
   }
   HEAP32[pnum >> 2] = num;
   return 0;
  }

  function _gettimeofday(ptr) {
   var now = Date.now();
   HEAP32[ptr >> 2] = now / 1e3 | 0;
   HEAP32[ptr + 4 >> 2] = now % 1e3 * 1e3 | 0;
   return 0;
  }

  function _gmtime_r(time, tmPtr) {
   var date = new Date(HEAP32[time >> 2] * 1e3);
   HEAP32[tmPtr >> 2] = date.getUTCSeconds();
   HEAP32[tmPtr + 4 >> 2] = date.getUTCMinutes();
   HEAP32[tmPtr + 8 >> 2] = date.getUTCHours();
   HEAP32[tmPtr + 12 >> 2] = date.getUTCDate();
   HEAP32[tmPtr + 16 >> 2] = date.getUTCMonth();
   HEAP32[tmPtr + 20 >> 2] = date.getUTCFullYear() - 1900;
   HEAP32[tmPtr + 24 >> 2] = date.getUTCDay();
   HEAP32[tmPtr + 36 >> 2] = 0;
   HEAP32[tmPtr + 32 >> 2] = 0;
   var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
   var yday = (date.getTime() - start) / (1e3 * 60 * 60 * 24) | 0;
   HEAP32[tmPtr + 28 >> 2] = yday;
   if (!_gmtime_r.GMTString) _gmtime_r.GMTString = allocateUTF8("GMT");
   HEAP32[tmPtr + 40 >> 2] = _gmtime_r.GMTString;
   return tmPtr;
  }

  function _jsCloseJavaScriptRefNum() {
   Module.javaScriptInvoke.jsCloseJavaScriptRefNum.apply(undefined, arguments);
  }

  function _jsExecutionContextFPSync() {
   Module.coreHelpers.jsExecutionContextFPSync.apply(undefined, arguments);
  }

  function _jsHttpClientAddHeader() {
   Module.httpClient.jsHttpClientAddHeader.apply(undefined, arguments);
  }

  function _jsHttpClientClose() {
   Module.httpClient.jsHttpClientClose.apply(undefined, arguments);
  }

  function _jsHttpClientConfigCORS() {
   Module.httpClient.jsHttpClientConfigCORS.apply(undefined, arguments);
  }

  function _jsHttpClientGetHeader() {
   Module.httpClient.jsHttpClientGetHeader.apply(undefined, arguments);
  }

  function _jsHttpClientHeaderExists() {
   Module.httpClient.jsHttpClientHeaderExists.apply(undefined, arguments);
  }

  function _jsHttpClientListHeaders() {
   Module.httpClient.jsHttpClientListHeaders.apply(undefined, arguments);
  }

  function _jsHttpClientMethod() {
   Module.httpClient.jsHttpClientMethod.apply(undefined, arguments);
  }

  function _jsHttpClientOpen() {
   Module.httpClient.jsHttpClientOpen.apply(undefined, arguments);
  }

  function _jsHttpClientRemoveHeader() {
   Module.httpClient.jsHttpClientRemoveHeader.apply(undefined, arguments);
  }

  function _jsIsNotAJavaScriptRefnum() {
   Module.javaScriptInvoke.jsIsNotAJavaScriptRefnum.apply(undefined, arguments);
  }

  function _jsJavaScriptInvoke() {
   Module.javaScriptInvoke.jsJavaScriptInvoke.apply(undefined, arguments);
  }

  function _jsRegisterForControlEvent() {
   Module.eventHelpers.jsRegisterForControlEvent.apply(undefined, arguments);
  }

  function _jsUnRegisterForControlEvent() {
   Module.eventHelpers.jsUnRegisterForControlEvent.apply(undefined, arguments);
  }

  function _tzset() {
   if (_tzset.called) return;
   _tzset.called = true;
   var currentYear = new Date().getFullYear();
   var winter = new Date(currentYear, 0, 1);
   var summer = new Date(currentYear, 6, 1);
   var winterOffset = winter.getTimezoneOffset();
   var summerOffset = summer.getTimezoneOffset();
   var stdTimezoneOffset = Math.max(winterOffset, summerOffset);
   HEAP32[__get_timezone() >> 2] = stdTimezoneOffset * 60;
   HEAP32[__get_daylight() >> 2] = Number(winterOffset != summerOffset);
   function extractZone(date) {
    var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
    return match ? match[1] : "GMT";
   }
   var winterName = extractZone(winter);
   var summerName = extractZone(summer);
   var winterNamePtr = allocateUTF8(winterName);
   var summerNamePtr = allocateUTF8(summerName);
   if (summerOffset < winterOffset) {
    HEAP32[__get_tzname() >> 2] = winterNamePtr;
    HEAP32[__get_tzname() + 4 >> 2] = summerNamePtr;
   } else {
    HEAP32[__get_tzname() >> 2] = summerNamePtr;
    HEAP32[__get_tzname() + 4 >> 2] = winterNamePtr;
   }
  }

  function _localtime_r(time, tmPtr) {
   _tzset();
   var date = new Date(HEAP32[time >> 2] * 1e3);
   HEAP32[tmPtr >> 2] = date.getSeconds();
   HEAP32[tmPtr + 4 >> 2] = date.getMinutes();
   HEAP32[tmPtr + 8 >> 2] = date.getHours();
   HEAP32[tmPtr + 12 >> 2] = date.getDate();
   HEAP32[tmPtr + 16 >> 2] = date.getMonth();
   HEAP32[tmPtr + 20 >> 2] = date.getFullYear() - 1900;
   HEAP32[tmPtr + 24 >> 2] = date.getDay();
   var start = new Date(date.getFullYear(), 0, 1);
   var yday = (date.getTime() - start.getTime()) / (1e3 * 60 * 60 * 24) | 0;
   HEAP32[tmPtr + 28 >> 2] = yday;
   HEAP32[tmPtr + 36 >> 2] = -(date.getTimezoneOffset() * 60);
   var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
   var winterOffset = start.getTimezoneOffset();
   var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset)) | 0;
   HEAP32[tmPtr + 32 >> 2] = dst;
   var zonePtr = HEAP32[__get_tzname() + (dst ? 4 : 0) >> 2];
   HEAP32[tmPtr + 40 >> 2] = zonePtr;
   return tmPtr;
  }

  var asmLibraryArg = {
   "s": ___sys_fstat64,
   "r": ___sys_stat64,
   "a": _abort,
   "d": _emscripten_get_now,
   "n": _emscripten_memcpy_big,
   "o": _emscripten_resize_heap,
   "k": _exit,
   "p": _fd_fdstat_get,
   "q": _fd_read,
   "m": _fd_seek,
   "e": _fd_write,
   "i": _gettimeofday,
   "j": _gmtime_r,
   "g": _jsCloseJavaScriptRefNum,
   "l": _jsExecutionContextFPSync,
   "A": _jsHttpClientAddHeader,
   "B": _jsHttpClientClose,
   "v": _jsHttpClientConfigCORS,
   "y": _jsHttpClientGetHeader,
   "x": _jsHttpClientHeaderExists,
   "w": _jsHttpClientListHeaders,
   "b": _jsHttpClientMethod,
   "C": _jsHttpClientOpen,
   "z": _jsHttpClientRemoveHeader,
   "f": _jsIsNotAJavaScriptRefnum,
   "u": _jsJavaScriptInvoke,
   "h": _jsRegisterForControlEvent,
   "t": _jsUnRegisterForControlEvent,
   "c": _localtime_r
  };

  var asm = createWasm();

  var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function() {
   return (___wasm_call_ctors = Module["___wasm_call_ctors"] = Module["asm"]["E"]).apply(null, arguments);
  };

  var _Vireo_MaxExecWakeUpTime = Module["_Vireo_MaxExecWakeUpTime"] = function() {
   return (_Vireo_MaxExecWakeUpTime = Module["_Vireo_MaxExecWakeUpTime"] = Module["asm"]["G"]).apply(null, arguments);
  };

  var _EggShell_Create = Module["_EggShell_Create"] = function() {
   return (_EggShell_Create = Module["_EggShell_Create"] = Module["asm"]["H"]).apply(null, arguments);
  };

  var _EggShell_REPL = Module["_EggShell_REPL"] = function() {
   return (_EggShell_REPL = Module["_EggShell_REPL"] = Module["asm"]["I"]).apply(null, arguments);
  };

  var _EggShell_ExecuteSlices = Module["_EggShell_ExecuteSlices"] = function() {
   return (_EggShell_ExecuteSlices = Module["_EggShell_ExecuteSlices"] = Module["asm"]["J"]).apply(null, arguments);
  };

  var _EggShell_GetTypeList = Module["_EggShell_GetTypeList"] = function() {
   return (_EggShell_GetTypeList = Module["_EggShell_GetTypeList"] = Module["asm"]["K"]).apply(null, arguments);
  };

  var _EggShell_Delete = Module["_EggShell_Delete"] = function() {
   return (_EggShell_Delete = Module["_EggShell_Delete"] = Module["asm"]["L"]).apply(null, arguments);
  };

  var _EggShell_PeekMemory = Module["_EggShell_PeekMemory"] = function() {
   return (_EggShell_PeekMemory = Module["_EggShell_PeekMemory"] = Module["asm"]["M"]).apply(null, arguments);
  };

  var _EggShell_PokeMemory = Module["_EggShell_PokeMemory"] = function() {
   return (_EggShell_PokeMemory = Module["_EggShell_PokeMemory"] = Module["asm"]["N"]).apply(null, arguments);
  };

  var _EggShell_AllocateData = Module["_EggShell_AllocateData"] = function() {
   return (_EggShell_AllocateData = Module["_EggShell_AllocateData"] = Module["asm"]["O"]).apply(null, arguments);
  };

  var _EggShell_DeallocateData = Module["_EggShell_DeallocateData"] = function() {
   return (_EggShell_DeallocateData = Module["_EggShell_DeallocateData"] = Module["asm"]["P"]).apply(null, arguments);
  };

  var _EggShell_ReinitializeToDefault = Module["_EggShell_ReinitializeToDefault"] = function() {
   return (_EggShell_ReinitializeToDefault = Module["_EggShell_ReinitializeToDefault"] = Module["asm"]["Q"]).apply(null, arguments);
  };

  var _EggShell_FindValue = Module["_EggShell_FindValue"] = function() {
   return (_EggShell_FindValue = Module["_EggShell_FindValue"] = Module["asm"]["R"]).apply(null, arguments);
  };

  var _EggShell_FindSubValue = Module["_EggShell_FindSubValue"] = function() {
   return (_EggShell_FindSubValue = Module["_EggShell_FindSubValue"] = Module["asm"]["S"]).apply(null, arguments);
  };

  var _EggShell_WriteDouble = Module["_EggShell_WriteDouble"] = function() {
   return (_EggShell_WriteDouble = Module["_EggShell_WriteDouble"] = Module["asm"]["T"]).apply(null, arguments);
  };

  var _EggShell_ReadDouble = Module["_EggShell_ReadDouble"] = function() {
   return (_EggShell_ReadDouble = Module["_EggShell_ReadDouble"] = Module["asm"]["U"]).apply(null, arguments);
  };

  var _EggShell_WriteValueString = Module["_EggShell_WriteValueString"] = function() {
   return (_EggShell_WriteValueString = Module["_EggShell_WriteValueString"] = Module["asm"]["V"]).apply(null, arguments);
  };

  var _EggShell_ReadValueString = Module["_EggShell_ReadValueString"] = function() {
   return (_EggShell_ReadValueString = Module["_EggShell_ReadValueString"] = Module["asm"]["W"]).apply(null, arguments);
  };

  var _EggShell_ResizeArray = Module["_EggShell_ResizeArray"] = function() {
   return (_EggShell_ResizeArray = Module["_EggShell_ResizeArray"] = Module["asm"]["X"]).apply(null, arguments);
  };

  var _EggShell_GetVariantAttribute = Module["_EggShell_GetVariantAttribute"] = function() {
   return (_EggShell_GetVariantAttribute = Module["_EggShell_GetVariantAttribute"] = Module["asm"]["Y"]).apply(null, arguments);
  };

  var _EggShell_SetVariantAttribute = Module["_EggShell_SetVariantAttribute"] = function() {
   return (_EggShell_SetVariantAttribute = Module["_EggShell_SetVariantAttribute"] = Module["asm"]["Z"]).apply(null, arguments);
  };

  var _EggShell_DeleteVariantAttribute = Module["_EggShell_DeleteVariantAttribute"] = function() {
   return (_EggShell_DeleteVariantAttribute = Module["_EggShell_DeleteVariantAttribute"] = Module["asm"]["_"]).apply(null, arguments);
  };

  var _Data_GetStringBegin = Module["_Data_GetStringBegin"] = function() {
   return (_Data_GetStringBegin = Module["_Data_GetStringBegin"] = Module["asm"]["$"]).apply(null, arguments);
  };

  var _Data_GetStringLength = Module["_Data_GetStringLength"] = function() {
   return (_Data_GetStringLength = Module["_Data_GetStringLength"] = Module["asm"]["aa"]).apply(null, arguments);
  };

  var _Data_GetArrayBegin = Module["_Data_GetArrayBegin"] = function() {
   return (_Data_GetArrayBegin = Module["_Data_GetArrayBegin"] = Module["asm"]["ba"]).apply(null, arguments);
  };

  var _Data_GetArrayDimensions = Module["_Data_GetArrayDimensions"] = function() {
   return (_Data_GetArrayDimensions = Module["_Data_GetArrayDimensions"] = Module["asm"]["ca"]).apply(null, arguments);
  };

  var _Data_GetArrayLength = Module["_Data_GetArrayLength"] = function() {
   return (_Data_GetArrayLength = Module["_Data_GetArrayLength"] = Module["asm"]["da"]).apply(null, arguments);
  };

  var _TypeManager_Define = Module["_TypeManager_Define"] = function() {
   return (_TypeManager_Define = Module["_TypeManager_Define"] = Module["asm"]["ea"]).apply(null, arguments);
  };

  var _TypeManager_FindType = Module["_TypeManager_FindType"] = function() {
   return (_TypeManager_FindType = Module["_TypeManager_FindType"] = Module["asm"]["fa"]).apply(null, arguments);
  };

  var _TypeRef_TopAQSize = Module["_TypeRef_TopAQSize"] = function() {
   return (_TypeRef_TopAQSize = Module["_TypeRef_TopAQSize"] = Module["asm"]["ga"]).apply(null, arguments);
  };

  var _TypeRef_IsFlat = Module["_TypeRef_IsFlat"] = function() {
   return (_TypeRef_IsFlat = Module["_TypeRef_IsFlat"] = Module["asm"]["ha"]).apply(null, arguments);
  };

  var _TypeRef_IsValid = Module["_TypeRef_IsValid"] = function() {
   return (_TypeRef_IsValid = Module["_TypeRef_IsValid"] = Module["asm"]["ia"]).apply(null, arguments);
  };

  var _TypeRef_HasCustomDefault = Module["_TypeRef_HasCustomDefault"] = function() {
   return (_TypeRef_HasCustomDefault = Module["_TypeRef_HasCustomDefault"] = Module["asm"]["ja"]).apply(null, arguments);
  };

  var _TypeRef_BitEncoding = Module["_TypeRef_BitEncoding"] = function() {
   return (_TypeRef_BitEncoding = Module["_TypeRef_BitEncoding"] = Module["asm"]["ka"]).apply(null, arguments);
  };

  var _TypeRef_Alignment = Module["_TypeRef_Alignment"] = function() {
   return (_TypeRef_Alignment = Module["_TypeRef_Alignment"] = Module["asm"]["la"]).apply(null, arguments);
  };

  var _TypeRef_Name = Module["_TypeRef_Name"] = function() {
   return (_TypeRef_Name = Module["_TypeRef_Name"] = Module["asm"]["ma"]).apply(null, arguments);
  };

  var _TypeRef_ElementName = Module["_TypeRef_ElementName"] = function() {
   return (_TypeRef_ElementName = Module["_TypeRef_ElementName"] = Module["asm"]["na"]).apply(null, arguments);
  };

  var _TypeRef_ElementOffset = Module["_TypeRef_ElementOffset"] = function() {
   return (_TypeRef_ElementOffset = Module["_TypeRef_ElementOffset"] = Module["asm"]["oa"]).apply(null, arguments);
  };

  var _TypeRef_Rank = Module["_TypeRef_Rank"] = function() {
   return (_TypeRef_Rank = Module["_TypeRef_Rank"] = Module["asm"]["pa"]).apply(null, arguments);
  };

  var _TypeRef_PointerType = Module["_TypeRef_PointerType"] = function() {
   return (_TypeRef_PointerType = Module["_TypeRef_PointerType"] = Module["asm"]["qa"]).apply(null, arguments);
  };

  var _TypeRef_Next = Module["_TypeRef_Next"] = function() {
   return (_TypeRef_Next = Module["_TypeRef_Next"] = Module["asm"]["ra"]).apply(null, arguments);
  };

  var _TypeRef_ElementUsageType = Module["_TypeRef_ElementUsageType"] = function() {
   return (_TypeRef_ElementUsageType = Module["_TypeRef_ElementUsageType"] = Module["asm"]["sa"]).apply(null, arguments);
  };

  var _TypeRef_SubElementCount = Module["_TypeRef_SubElementCount"] = function() {
   return (_TypeRef_SubElementCount = Module["_TypeRef_SubElementCount"] = Module["asm"]["ta"]).apply(null, arguments);
  };

  var _TypeRef_GetSubElementByIndex = Module["_TypeRef_GetSubElementByIndex"] = function() {
   return (_TypeRef_GetSubElementByIndex = Module["_TypeRef_GetSubElementByIndex"] = Module["asm"]["ua"]).apply(null, arguments);
  };

  var _TypeRef_IsCluster = Module["_TypeRef_IsCluster"] = function() {
   return (_TypeRef_IsCluster = Module["_TypeRef_IsCluster"] = Module["asm"]["va"]).apply(null, arguments);
  };

  var _TypeRef_IsArray = Module["_TypeRef_IsArray"] = function() {
   return (_TypeRef_IsArray = Module["_TypeRef_IsArray"] = Module["asm"]["wa"]).apply(null, arguments);
  };

  var _TypeRef_IsBoolean = Module["_TypeRef_IsBoolean"] = function() {
   return (_TypeRef_IsBoolean = Module["_TypeRef_IsBoolean"] = Module["asm"]["xa"]).apply(null, arguments);
  };

  var _TypeRef_IsInteger = Module["_TypeRef_IsInteger"] = function() {
   return (_TypeRef_IsInteger = Module["_TypeRef_IsInteger"] = Module["asm"]["ya"]).apply(null, arguments);
  };

  var _TypeRef_IsSigned = Module["_TypeRef_IsSigned"] = function() {
   return (_TypeRef_IsSigned = Module["_TypeRef_IsSigned"] = Module["asm"]["za"]).apply(null, arguments);
  };

  var _TypeRef_IsEnum = Module["_TypeRef_IsEnum"] = function() {
   return (_TypeRef_IsEnum = Module["_TypeRef_IsEnum"] = Module["asm"]["Aa"]).apply(null, arguments);
  };

  var _TypeRef_IsFloat = Module["_TypeRef_IsFloat"] = function() {
   return (_TypeRef_IsFloat = Module["_TypeRef_IsFloat"] = Module["asm"]["Ba"]).apply(null, arguments);
  };

  var _TypeRef_IsString = Module["_TypeRef_IsString"] = function() {
   return (_TypeRef_IsString = Module["_TypeRef_IsString"] = Module["asm"]["Ca"]).apply(null, arguments);
  };

  var _TypeRef_IsPath = Module["_TypeRef_IsPath"] = function() {
   return (_TypeRef_IsPath = Module["_TypeRef_IsPath"] = Module["asm"]["Da"]).apply(null, arguments);
  };

  var _TypeRef_IsTimestamp = Module["_TypeRef_IsTimestamp"] = function() {
   return (_TypeRef_IsTimestamp = Module["_TypeRef_IsTimestamp"] = Module["asm"]["Ea"]).apply(null, arguments);
  };

  var _TypeRef_IsComplex = Module["_TypeRef_IsComplex"] = function() {
   return (_TypeRef_IsComplex = Module["_TypeRef_IsComplex"] = Module["asm"]["Fa"]).apply(null, arguments);
  };

  var _TypeRef_IsAnalogWaveform = Module["_TypeRef_IsAnalogWaveform"] = function() {
   return (_TypeRef_IsAnalogWaveform = Module["_TypeRef_IsAnalogWaveform"] = Module["asm"]["Ga"]).apply(null, arguments);
  };

  var _TypeRef_IsJavaScriptStaticRefNum = Module["_TypeRef_IsJavaScriptStaticRefNum"] = function() {
   return (_TypeRef_IsJavaScriptStaticRefNum = Module["_TypeRef_IsJavaScriptStaticRefNum"] = Module["asm"]["Ha"]).apply(null, arguments);
  };

  var _TypeRef_IsJavaScriptDynamicRefNum = Module["_TypeRef_IsJavaScriptDynamicRefNum"] = function() {
   return (_TypeRef_IsJavaScriptDynamicRefNum = Module["_TypeRef_IsJavaScriptDynamicRefNum"] = Module["asm"]["Ia"]).apply(null, arguments);
  };

  var _TypeRef_TestNeedsUpdateAndReset = Module["_TypeRef_TestNeedsUpdateAndReset"] = function() {
   return (_TypeRef_TestNeedsUpdateAndReset = Module["_TypeRef_TestNeedsUpdateAndReset"] = Module["asm"]["Ja"]).apply(null, arguments);
  };

  var _TypeRef_TestNeedsUpdateWithoutReset = Module["_TypeRef_TestNeedsUpdateWithoutReset"] = function() {
   return (_TypeRef_TestNeedsUpdateWithoutReset = Module["_TypeRef_TestNeedsUpdateWithoutReset"] = Module["asm"]["Ka"]).apply(null, arguments);
  };

  var _Data_RawBlockSize = Module["_Data_RawBlockSize"] = function() {
   return (_Data_RawBlockSize = Module["_Data_RawBlockSize"] = Module["asm"]["La"]).apply(null, arguments);
  };

  var _Data_Length = Module["_Data_Length"] = function() {
   return (_Data_Length = Module["_Data_Length"] = Module["asm"]["Ma"]).apply(null, arguments);
  };

  var _Data_Type = Module["_Data_Type"] = function() {
   return (_Data_Type = Module["_Data_Type"] = Module["asm"]["Na"]).apply(null, arguments);
  };

  var _Data_GetLength = Module["_Data_GetLength"] = function() {
   return (_Data_GetLength = Module["_Data_GetLength"] = Module["asm"]["Oa"]).apply(null, arguments);
  };

  var _Data_Resize1D = Module["_Data_Resize1D"] = function() {
   return (_Data_Resize1D = Module["_Data_Resize1D"] = Module["asm"]["Pa"]).apply(null, arguments);
  };

  var _Data_ResizeDimensions = Module["_Data_ResizeDimensions"] = function() {
   return (_Data_ResizeDimensions = Module["_Data_ResizeDimensions"] = Module["asm"]["Qa"]).apply(null, arguments);
  };

  var _Data_RawPointerFromOffset = Module["_Data_RawPointerFromOffset"] = function() {
   return (_Data_RawPointerFromOffset = Module["_Data_RawPointerFromOffset"] = Module["asm"]["Ra"]).apply(null, arguments);
  };

  var _Data_Read1Byte = Module["_Data_Read1Byte"] = function() {
   return (_Data_Read1Byte = Module["_Data_Read1Byte"] = Module["asm"]["Sa"]).apply(null, arguments);
  };

  var _Data_Write1Byte = Module["_Data_Write1Byte"] = function() {
   return (_Data_Write1Byte = Module["_Data_Write1Byte"] = Module["asm"]["Ta"]).apply(null, arguments);
  };

  var _Data_Read2Bytes = Module["_Data_Read2Bytes"] = function() {
   return (_Data_Read2Bytes = Module["_Data_Read2Bytes"] = Module["asm"]["Ua"]).apply(null, arguments);
  };

  var _Data_Write2Bytes = Module["_Data_Write2Bytes"] = function() {
   return (_Data_Write2Bytes = Module["_Data_Write2Bytes"] = Module["asm"]["Va"]).apply(null, arguments);
  };

  var _Data_Read4Bytes = Module["_Data_Read4Bytes"] = function() {
   return (_Data_Read4Bytes = Module["_Data_Read4Bytes"] = Module["asm"]["Wa"]).apply(null, arguments);
  };

  var _Data_Write4Bytes = Module["_Data_Write4Bytes"] = function() {
   return (_Data_Write4Bytes = Module["_Data_Write4Bytes"] = Module["asm"]["Xa"]).apply(null, arguments);
  };

  var _Data_Read8Bytes = Module["_Data_Read8Bytes"] = function() {
   return (_Data_Read8Bytes = Module["_Data_Read8Bytes"] = Module["asm"]["Ya"]).apply(null, arguments);
  };

  var _Data_Write8Bytes = Module["_Data_Write8Bytes"] = function() {
   return (_Data_Write8Bytes = Module["_Data_Write8Bytes"] = Module["asm"]["Za"]).apply(null, arguments);
  };

  var _Data_ReadPointer = Module["_Data_ReadPointer"] = function() {
   return (_Data_ReadPointer = Module["_Data_ReadPointer"] = Module["asm"]["_a"]).apply(null, arguments);
  };

  var _Data_WritePointer = Module["_Data_WritePointer"] = function() {
   return (_Data_WritePointer = Module["_Data_WritePointer"] = Module["asm"]["$a"]).apply(null, arguments);
  };

  var _Data_ReadBytes = Module["_Data_ReadBytes"] = function() {
   return (_Data_ReadBytes = Module["_Data_ReadBytes"] = Module["asm"]["ab"]).apply(null, arguments);
  };

  var _Data_WriteBytes = Module["_Data_WriteBytes"] = function() {
   return (_Data_WriteBytes = Module["_Data_WriteBytes"] = Module["asm"]["bb"]).apply(null, arguments);
  };

  var _Occurrence_Set = Module["_Occurrence_Set"] = function() {
   return (_Occurrence_Set = Module["_Occurrence_Set"] = Module["asm"]["cb"]).apply(null, arguments);
  };

  var _OccurEvent = Module["_OccurEvent"] = function() {
   return (_OccurEvent = Module["_OccurEvent"] = Module["asm"]["db"]).apply(null, arguments);
  };

  var _malloc = Module["_malloc"] = function() {
   return (_malloc = Module["_malloc"] = Module["asm"]["eb"]).apply(null, arguments);
  };

  var _free = Module["_free"] = function() {
   return (_free = Module["_free"] = Module["asm"]["fb"]).apply(null, arguments);
  };

  var _JavaScriptInvoke_GetParameterDataRef = Module["_JavaScriptInvoke_GetParameterDataRef"] = function() {
   return (_JavaScriptInvoke_GetParameterDataRef = Module["_JavaScriptInvoke_GetParameterDataRef"] = Module["asm"]["gb"]).apply(null, arguments);
  };

  var _JavaScriptInvoke_GetParameterTypeRef = Module["_JavaScriptInvoke_GetParameterTypeRef"] = function() {
   return (_JavaScriptInvoke_GetParameterTypeRef = Module["_JavaScriptInvoke_GetParameterTypeRef"] = Module["asm"]["hb"]).apply(null, arguments);
  };

  var __get_tzname = Module["__get_tzname"] = function() {
   return (__get_tzname = Module["__get_tzname"] = Module["asm"]["ib"]).apply(null, arguments);
  };

  var __get_daylight = Module["__get_daylight"] = function() {
   return (__get_daylight = Module["__get_daylight"] = Module["asm"]["jb"]).apply(null, arguments);
  };

  var __get_timezone = Module["__get_timezone"] = function() {
   return (__get_timezone = Module["__get_timezone"] = Module["asm"]["kb"]).apply(null, arguments);
  };

  var stackSave = Module["stackSave"] = function() {
   return (stackSave = Module["stackSave"] = Module["asm"]["lb"]).apply(null, arguments);
  };

  var stackRestore = Module["stackRestore"] = function() {
   return (stackRestore = Module["stackRestore"] = Module["asm"]["mb"]).apply(null, arguments);
  };

  var stackAlloc = Module["stackAlloc"] = function() {
   return (stackAlloc = Module["stackAlloc"] = Module["asm"]["nb"]).apply(null, arguments);
  };

  Module["setValue"] = setValue;

  Module["getValue"] = getValue;

  Module["stringToUTF8"] = stringToUTF8;

  Module["lengthBytesUTF8"] = lengthBytesUTF8;

  Module["stackSave"] = stackSave;

  Module["stackRestore"] = stackRestore;

  Module["stackAlloc"] = stackAlloc;

  var calledRun;

  function ExitStatus(status) {
   this.name = "ExitStatus";
   this.message = "Program terminated with exit(" + status + ")";
   this.status = status;
  }

  dependenciesFulfilled = function runCaller() {
   if (!calledRun) run();
   if (!calledRun) dependenciesFulfilled = runCaller;
  };

  function run(args) {
   if (runDependencies > 0) {
    return;
   }
   preRun();
   if (runDependencies > 0) {
    return;
   }
   function doRun() {
    if (calledRun) return;
    calledRun = true;
    Module["calledRun"] = true;
    if (ABORT) return;
    initRuntime();
    readyPromiseResolve(Module);
    if (Module["onRuntimeInitialized"]) Module["onRuntimeInitialized"]();
    postRun();
   }
   if (Module["setStatus"]) {
    Module["setStatus"]("Running...");
    setTimeout(function() {
     setTimeout(function() {
      Module["setStatus"]("");
     }, 1);
     doRun();
    }, 1);
   } else {
    doRun();
   }
  }

  Module["run"] = run;

  function exit(status, implicit) {
   if (implicit && keepRuntimeAlive() && status === 0) {
    return;
   }
   if (keepRuntimeAlive()) ; else {
    if (Module["onExit"]) Module["onExit"](status);
    ABORT = true;
   }
   quit_(status, new ExitStatus(status));
  }

  if (Module["preInit"]) {
   if (typeof Module["preInit"] == "function") Module["preInit"] = [ Module["preInit"] ];
   while (Module["preInit"].length > 0) {
    Module["preInit"].pop()();
   }
  }

  run();

  Module.vireopostjs = function() {};


    return VireoCreateCoreModule.ready
  }
  );
  })();

  // Copyright (c) 2020 National Instruments
  // SPDX-License-Identifier: MIT

  var assignCoreHelpers;
  (function () {
      // Static Private Variables (all vireo instances)
      // None

      // Vireo Core Mixin Function
      assignCoreHelpers = function (Module, publicAPI) {
          Module.coreHelpers = {};
          publicAPI.coreHelpers = {};

          // Private Instance Variables (per vireo instance)
          var fpSync = function (/* fpIdStr*/) {
              // Dummy noop function user can replace by using eggShell.setFPSyncFunction
          };

          var CODES = {
              NO_ERROR: 0
          };

          // Exported functions
          Module.coreHelpers.jsExecutionContextFPSync = function (fpStringPointer) {
              var fpString = Module.eggShell.dataReadString(fpStringPointer);
              fpSync(fpString);
          };

          publicAPI.coreHelpers.setFPSyncFunction = function (fn) {
              if (typeof fn !== 'function') {
                  throw new Error('FPSync must be a callable function');
              }

              fpSync = fn;
          };

          // Returns the length of a C string (excluding null terminator)
          Module.coreHelpers.findCStringLength = function (u8Array, startIndex) {
              var i,
                  end = u8Array.length;

              for (i = startIndex; i < end; i += 1) {
                  if (u8Array[i] === 0) {
                      return i - startIndex;
                  }
              }
              return -1;
          };

          // WARNING: DO NOT USE UNLESS STACK SAVED FIRST
          Module.coreHelpers.writeJSStringToStack = function (str) {
              /* eslint-disable no-bitwise */
              // See https://github.com/kripken/emscripten/blob/6dc4ac5f9e4d8484e273e4dcc554f809738cedd6/src/preamble.js#L155
              // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
              var strMaxStackLength = (str.length << 2) + 1;
              var strStackPointer = Module.stackAlloc(strMaxStackLength);
              Module.stringToUTF8(str, strStackPointer, strMaxStackLength);
              return strStackPointer;
          };

          // WARNING: CALLER IS RESPONSIBLE TO FREE THE RETURNED POINTER
          Module.coreHelpers.writeJSStringToHeap = function (str) {
              /* eslint-disable no-bitwise */
              // See https://github.com/kripken/emscripten/blob/6dc4ac5f9e4d8484e273e4dcc554f809738cedd6/src/preamble.js#L155
              // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
              var strMaxHeapLength = (str.length << 2) + 1;
              var strHeapPointer = Module._malloc(strMaxHeapLength);
              Module.stringToUTF8(str, strHeapPointer, strMaxHeapLength);
              return strHeapPointer;
          };

          // Takes Vireo Strings (non-safe UTF-8 encoded byte buffers with known length) and returns JS strings (non-safe UTF-16 encoded character arrays)
          // Any bytes that are not part of a valid UTF-8 byte sequence are replaced with the Unicode Replacement Character
          // In addition, code points represented as overlong UTF-8 byte sequences have the byte sequence replaced with an equal number of Unicode Replacement Characters
          // This code does not validate for UTF-8 safety, only for UTF-8 byte sequence structure.
          // As such, the following UTF-8 safety checks are not performed: forbidding unicode reserved blocks, forbidding internal use blocks, forbidding the surrogate code point range in UTF-8 byte sequences, etc.
          Module.coreHelpers.sizedUtf8ArrayToJSString = function (u8Array, startIndex, length) {
              /* eslint-disable no-continue, no-plusplus, no-bitwise */
              /* eslint complexity: ["error", 40]*/
              var REPLACEMENT_CODEPOINT = '\uFFFD';
              var REPLACEMENT_CODEPOINT_LENGTH_2 = '\uFFFD\uFFFD';
              var REPLACEMENT_CODEPOINT_LENGTH_3 = '\uFFFD\uFFFD\uFFFD';
              var REPLACEMENT_CODEPOINT_LENGTH_4 = '\uFFFD\uFFFD\uFFFD\uFFFD';
              var u0, u1, u2, u3;
              var idx = startIndex;
              var endIndex = startIndex + length;
              endIndex = endIndex > u8Array.length ? u8Array.length : endIndex;
              var str = '';
              if (length <= 0) {
                  return str;
              }
              while (true) {
                  // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
                  // This algorithm was adapted from the emscripten source: https://github.com/kripken/emscripten/blob/6dc4ac5f9e4d8484e273e4dcc554f809738cedd6/src/preamble.js#L543

                  // Algorithm based on the following UTF-8 byte structure:
                  // [1 byte] 0xxx xxxx
                  // [2 byte] 110x xxxx   10xx xxxx
                  // [3 byte] 1110 xxxx   10xx xxxx   10xx xxxx
                  // [4 byte] 1111 0xxx   10xx xxxx   10xx xxxx   10xx xxxx
                  // Note: The [4 byte] sequence can numerically encode a 21-bit number representing values up to U+1FFFFF however the last valid Unicode code point is U+10FFFF
                  // Note: Numerically a character must be represented with the minimum number of bytes in a UTF-8 byte sequence as possible. For example NULL (U+0000) can be represented as
                  // [1 byte] with 7-bits of zero, [2 bytes] with 11 bits of zero, [3 bytes] with 16 bits of zero, or [4 bytes] with 21 bits of zero.
                  // Using a longer byte sequence than necessary is referred to as overlong encoding and is an invalid UTF-8 byte sequence.

                  // Continue as long as there are bytes to process
                  if (idx >= endIndex) {
                      return str;
                  }

                  // [1 byte] sequences take the value as is and continue
                  u0 = u8Array[idx++];
                  if (!(u0 & 0x80)) {
                      str += String.fromCharCode(u0);
                      continue;
                  }

                  // Look ahead to validate the UTF-8 structure for [2 byte] to [4 byte] representations
                  // For invalid UTF-8 byte structures replace the current byte and continue
                  // Note: at this point idx refers to the first byte after u0
                  if ((u0 & 0xE0) === 0xC0) {
                      if (idx >= endIndex || (u8Array[idx] & 0xC0) !== 0x80) {
                          str += REPLACEMENT_CODEPOINT;
                          continue;
                      }
                  } else if ((u0 & 0xF0) === 0xE0) {
                      if (idx + 1 >= endIndex || (u8Array[idx] & 0xC0) !== 0x80 || (u8Array[idx + 1] & 0xC0) !== 0x80) {
                          str += REPLACEMENT_CODEPOINT;
                          continue;
                      }
                  } else if ((u0 & 0xF8) === 0xF0) {
                      if (idx + 2 >= endIndex || (u8Array[idx] & 0xC0) !== 0x80 || (u8Array[idx + 1] & 0xC0) !== 0x80 || (u8Array[idx + 2] & 0xC0) !== 0x80) {
                          str += REPLACEMENT_CODEPOINT;
                          continue;
                      }
                  } else {
                      // u0 byte says multi-byte utf-8 encoding but is invalid so replace this byte and move on
                      str += REPLACEMENT_CODEPOINT;
                      continue;
                  }

                  // At this point UTF-8 byte sequence following byte u0 is valid

                  // [2 byte] sequences are always below the UTF-16 surrogate pair range so take the value and continue
                  // Note: The first code point in a [2 byte] sequence is U+0080, so any code point less than that is overlong and is replaced
                  u1 = u8Array[idx++] & 63;
                  if ((u0 & 0xE0) === 0xC0) {
                      u0 = ((u0 & 31) << 6) | u1;
                      if (u0 < 0x80) {
                          str += REPLACEMENT_CODEPOINT_LENGTH_2;
                          continue;
                      }
                      str += String.fromCharCode(u0);
                      continue;
                  }

                  // [3 byte] and [4 byte] sequences may require UTF-16 surrogate pair so create point but do not append to the string until checking
                  // Note: The first code point in a [3 byte] sequence is U+0800, so any code point less than that is overlong and is replaced
                  // Note: The first code point in a [4 byte] sequence is U+10000, so any code point less than that is overlong and is replaced
                  u2 = u8Array[idx++] & 63;
                  if ((u0 & 0xF0) === 0xE0) {
                      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
                      if (u0 < 0x800) {
                          str += REPLACEMENT_CODEPOINT_LENGTH_3;
                          continue;
                      }
                  } else {
                      u3 = u8Array[idx++] & 63;
                      u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
                      if (u0 < 0x10000) {
                          str += REPLACEMENT_CODEPOINT_LENGTH_4;
                          continue;
                      }
                  }

                  // Codepoints in the range U+10000 to U+10FFFF must be encoded as a UTF-16 surrogate pair
                  // A surrogate pair is a high surrogate UTF-16 character with range 0xD800-0xDBFF and a low surrogate UTF-16 character with range 0xDC00-0xDFFF
                  // The algorithm for encoding a codepoint as a UTF-16 surrogate pair is available here: https://en.wikipedia.org/wiki/UTF-16#U.2B10000_to_U.2B10FFFF
                  // Note: Code points less than U+10000 are saved as a single UTF-16 character
                  // Note: Code points >= U+10000 and <= 0x10FFFF are saved as two UTF-16 characters using the surrogate pair algorithm
                  // Note: Code points greater than U+10FFFF are outside the Unicode range and replaced with the Unicode Replacement Character
                  if (u0 < 0x10000) {
                      str += String.fromCharCode(u0);
                  } else if (u0 <= 0x10FFFF) {
                      var ch = u0 - 0x10000;
                      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
                  } else {
                      str += REPLACEMENT_CODEPOINT_LENGTH_4;
                  }
              }
          };

          // Source adapted from https://github.com/kripken/emscripten/blob/bd050e64bb0d9952df1344b8ea9356252328ad83/src/preamble.js#L488
          // Copies the given Javascript String object 'str' to the given byte array at address 'startIndex' encoded in UTF8 form.
          // Use the function lengthBytesUTF8 to compute the exact number of bytes that this function will write.
          // Parameters:
          //   str: the Javascript string to copy.
          //   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
          //   startIndex: The starting offset in the array to begin the copying.
          //   maxBytesToWrite: The maximum number of bytes this function can write to the array. maxBytesToWrite=0 does not write any bytes to the output.
          // Returns the number of bytes written.
          Module.coreHelpers.jsStringToSizedUTF8Array = function (str, outU8Array, startIndex, maxBytesToWrite) {
              /* eslint-disable no-plusplus, id-length */
              // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
              if (!(maxBytesToWrite > 0)) {
                  return 0;
              }
              var outIdx = startIndex;
              var endIdx = outIdx + maxBytesToWrite;
              for (var i = 0; i < str.length; ++i) {
                  // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
                  // See http://unicode.org/faq/utf_bom.html#utf16-3
                  // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
                  var u = str.charCodeAt(i); // possibly a lead surrogate
                  if (u >= 0xD800 && u <= 0xDFFF) {
                      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
                  }
                  if (u <= 0x7F) {
                      if (outIdx >= endIdx) {
                          break;
                      }
                      outU8Array[outIdx++] = u;
                  } else if (u <= 0x7FF) {
                      if (outIdx + 1 >= endIdx) {
                          break;
                      }
                      outU8Array[outIdx++] = 0xC0 | (u >> 6);
                      outU8Array[outIdx++] = 0x80 | (u & 63);
                  } else if (u <= 0xFFFF) {
                      if (outIdx + 2 >= endIdx) {
                          break;
                      }
                      outU8Array[outIdx++] = 0xE0 | (u >> 12);
                      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
                      outU8Array[outIdx++] = 0x80 | (u & 63);
                  } else if (u <= 0x1FFFFF) {
                      if (outIdx + 3 >= endIdx) {
                          break;
                      }
                      outU8Array[outIdx++] = 0xF0 | (u >> 18);
                      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
                      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
                      outU8Array[outIdx++] = 0x80 | (u & 63);
                  } else if (u <= 0x3FFFFFF) {
                      if (outIdx + 4 >= endIdx) {
                          break;
                      }
                      outU8Array[outIdx++] = 0xF8 | (u >> 24);
                      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
                      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
                      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
                      outU8Array[outIdx++] = 0x80 | (u & 63);
                  } else {
                      if (outIdx + 5 >= endIdx) {
                          break;
                      }
                      outU8Array[outIdx++] = 0xFC | (u >> 30);
                      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
                      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
                      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
                      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
                      outU8Array[outIdx++] = 0x80 | (u & 63);
                  }
              }
              return outIdx - startIndex;
          };

          var writeNewError = function (errorValueRef, newError) {
              Module.eggShell.writeDouble(Module.eggShell.findSubValueRef(errorValueRef, 'status'), newError.status ? 1 : 0);
              Module.eggShell.writeDouble(Module.eggShell.findSubValueRef(errorValueRef, 'code'), newError.code);
              Module.eggShell.writeString(Module.eggShell.findSubValueRef(errorValueRef, 'source'), newError.source);
          };

          Module.coreHelpers.mergeErrors = function (errorValueRef, newError) {
              // Follows behavior of merge errors function: https://zone.ni.com/reference/en-XX/help/371361N-01/glang/merge_errors_function/
              if (errorValueRef === undefined) {
                  return;
              }

              var errorStatusValueRef = Module.eggShell.findSubValueRef(errorValueRef, 'status');
              var isExistingError = Module.eggShell.readDouble(errorStatusValueRef) !== 0;
              if (isExistingError) {
                  return;
              }

              var isNewError = newError.status;
              if (isNewError) {
                  writeNewError(errorValueRef, newError);
                  return;
              }

              var existingErrorCodeValueRef = Module.eggShell.findSubValueRef(errorValueRef, 'code');
              var existingErrorCode = Module.eggShell.readDouble(existingErrorCodeValueRef);
              var isExistingWarning = existingErrorCode !== CODES.NO_ERROR;
              var isNewWarning = newError.code !== CODES.NO_ERROR;
              if (isExistingWarning) {
                  return;
              }

              if (isNewWarning) {
                  writeNewError(errorValueRef, newError);
                  return;
              }

              // If no error or warning then pass through
              // Note: merge errors function ignores newErrorSource if no newError or newWarning so replicated here
              return;
          };

          Module.coreHelpers.formatMessageWithException = function (messageText, exception) {
              var additionalInfo;
              if (exception !== undefined && exception !== null) {
                  // Some browsers do not print the message in the stack so print both
                  if (typeof exception.message === 'string' && exception.message.length !== 0) {
                      additionalInfo = ', Additional information:\nMessage: ' + exception.message;
                      if (typeof exception.stack === 'string' && exception.stack.length !== 0) {
                          additionalInfo += '\nStack: ' + exception.stack;
                      }
                      return messageText + additionalInfo;
                  }
              }

              return messageText;
          };

          Module.coreHelpers.createSourceFromMessage = function (additionalInformation) {
              if (typeof additionalInformation === 'string' && additionalInformation.length !== 0) {
                  return `<APPEND>\n${additionalInformation}`;
              }

              return '';
          };
      };
  }());

  var assignCoreHelpers$1 = assignCoreHelpers;

  // Copyright (c) 2020 National Instruments
  // SPDX-License-Identifier: MIT

  var assignTypeHelpers;
  (function () {
      assignTypeHelpers = function (Module) {
          Module.typeHelpers = {};

          // Private instance functions
          var validateVisitMethod = function (fn, fnName) {
              if (typeof fn !== 'function') {
                  throw new Error('Visitor must have a method named `' + fnName + '`. Found: ' + fn);
              }
          };

          var dispatchVisitBoolean = function (typeVisitor, valueRef, data) {
              var visitFn = typeVisitor.visitBoolean;
              validateVisitMethod(visitFn, 'visitBoolean');
              return visitFn.call(typeVisitor, valueRef, data);
          };

          var dispatchVisitEnum = function (typeVisitor, valueRef, data) {
              var sizeOfEnum = Module.typeHelpers.topAQSize(valueRef.typeRef);
              var visitFn = undefined;
              var fnName = '';
              switch (sizeOfEnum) {
              case 1:
                  visitFn = typeVisitor.visitEnum8;
                  fnName = 'visitEnum8';
                  break;
              case 2:
                  visitFn = typeVisitor.visitEnum16;
                  fnName = 'visitEnum16';
                  break;
              case 4:
                  visitFn = typeVisitor.visitEnum32;
                  fnName = 'visitEnum32';
                  break;
              default:
                  throw new Error('Unexpected size for Enum. Found: ' + sizeOfEnum);
              }

              validateVisitMethod(visitFn, fnName);
              return visitFn.call(typeVisitor, valueRef, data);
          };

          var dispatchVisitInteger = function (typeVisitor, valueRef, data) {
              var typeRef = valueRef.typeRef;
              var isSignedInteger = Module.typeHelpers.isSigned(typeRef);
              var sizeOfInteger = Module.typeHelpers.topAQSize(typeRef);
              var visitFn = undefined;
              var fnName = '';
              if (isSignedInteger === true) {
                  switch (sizeOfInteger) {
                  case 1:
                      visitFn = typeVisitor.visitInt8;
                      fnName = 'visitInt8';
                      break;
                  case 2:
                      visitFn = typeVisitor.visitInt16;
                      fnName = 'visitInt16';
                      break;
                  case 4:
                      visitFn = typeVisitor.visitInt32;
                      fnName = 'visitInt32';
                      break;
                  case 8:
                      visitFn = typeVisitor.visitInt64;
                      fnName = 'visitInt64';
                      break;
                  default:
                      throw new Error('Unexpected size for Integer. Found: ' + sizeOfInteger);
                  }
              } else {
                  switch (sizeOfInteger) {
                  case 1:
                      visitFn = typeVisitor.visitUInt8;
                      fnName = 'visitUInt8';
                      break;
                  case 2:
                      visitFn = typeVisitor.visitUInt16;
                      fnName = 'visitUInt16';
                      break;
                  case 4:
                      visitFn = typeVisitor.visitUInt32;
                      fnName = 'visitUInt32';
                      break;
                  case 8:
                      visitFn = typeVisitor.visitUInt64;
                      fnName = 'visitUInt64';
                      break;
                  default:
                      throw new Error('Unexpected size for Unsigned Integer. Found: ' + sizeOfInteger);
                  }
              }

              validateVisitMethod(visitFn, fnName);
              return visitFn.call(typeVisitor, valueRef, data);
          };

          var dispatchVisitFloat = function (typeVisitor, valueRef, data) {
              var typeRef = valueRef.typeRef;
              var sizeOfFloat = Module.typeHelpers.topAQSize(typeRef);
              var visitFn;
              var fnName = '';
              switch (sizeOfFloat) {
              case 4:
                  visitFn = typeVisitor.visitSingle;
                  fnName = 'visitSingle';
                  break;
              case 8:
                  visitFn = typeVisitor.visitDouble;
                  fnName = 'visitDouble';
                  break;
              default:
                  throw new Error('Unexpected size for a Float value. Found: ' + sizeOfFloat);
              }

              validateVisitMethod(visitFn, fnName);
              return visitFn.call(typeVisitor, valueRef, data);
          };

          var dispatchVisitString = function (typeVisitor, valueRef, data) {
              var visitFn = typeVisitor.visitString;
              validateVisitMethod(visitFn, 'visitString');
              return visitFn.call(typeVisitor, valueRef, data);
          };

          var dispatchVisitComplex = function (typeVisitor, valueRef, data) {
              var typeRef = valueRef.typeRef,
                  sizeOfComplex = Module.typeHelpers.topAQSize(typeRef),
                  visitFn,
                  fnName;
              switch (sizeOfComplex) {
              case 8:
                  visitFn = typeVisitor.visitComplexSingle;
                  fnName = 'visitComplexSingle';
                  break;
              case 16:
                  visitFn = typeVisitor.visitComplexDouble;
                  fnName = 'visitComplexDouble';
                  break;
              default:
                  throw new Error('Unexpected size for a Complex value. Found: ' + sizeOfComplex);
              }

              validateVisitMethod(visitFn, fnName);
              return visitFn.call(typeVisitor, valueRef, data);
          };

          var dispatchVisitAnalogWaveform = function (typeVisitor, valueRef, data) {
              var visitFn = typeVisitor.visitAnalogWaveform;
              validateVisitMethod(visitFn, 'visitAnalogWaveform');
              return visitFn.call(typeVisitor, valueRef, data);
          };

          var dispatchVisitTimestamp = function (typeVisitor, valueRef, data) {
              var visitFn = typeVisitor.visitTimestamp;
              validateVisitMethod(visitFn, 'visitTimestamp');
              return visitFn.call(typeVisitor, valueRef, data);
          };

          var dispatchVisitPath = function (typeVisitor, valueRef, data) {
              var visitFn = typeVisitor.visitPath;
              validateVisitMethod(visitFn, 'visitPath');
              return visitFn.call(typeVisitor, valueRef, data);
          };

          var dispatchVisitArray = function (typeVisitor, valueRef, data) {
              var visitFn = typeVisitor.visitArray;
              validateVisitMethod(visitFn, 'visitArray');
              return visitFn.call(typeVisitor, valueRef, data);
          };

          var dispatchVisitJSObjectRefnum = function (typeVisitor, valueRef, data) {
              var visitFn = typeVisitor.visitJSObjectRefnum;
              validateVisitMethod(visitFn, 'visitJSObjectRefnum');
              return visitFn.call(typeVisitor, valueRef, data);
          };

          var dispatchVisitCluster = function (typeVisitor, valueRef, data) {
              var visitFn = typeVisitor.visitCluster;
              validateVisitMethod(visitFn, 'visitCluster');
              return visitFn.call(typeVisitor, valueRef, data);
          };

          // Exported functions
          Module.typeHelpers.topAQSize = function (typeRef) {
              return Module._TypeRef_TopAQSize(typeRef);
          };

          Module.typeHelpers.typeName = function (typeRef) {
              var stringTypeRef = Module.typeHelpers.findType('String');
              var responseValueRef = Module.eggShell.allocateData(stringTypeRef);
              Module._TypeRef_Name(Module.eggShell.v_userShell, typeRef, responseValueRef.typeRef, responseValueRef.dataRef);
              var response = Module.eggShell.readString(responseValueRef);
              Module.eggShell.deallocateData(responseValueRef);
              return response;
          };

          Module.typeHelpers.findType = function (typeName) {
              var stack = Module.stackSave();

              var typeNamePointer = Module.coreHelpers.writeJSStringToStack(typeName);
              const typeRef = Module._TypeManager_FindType(Module.eggShell.v_userShell, typeNamePointer);
              Module.stackRestore(stack);
              return typeRef;
          };

          Module.typeHelpers.typeRank = function (typeRef) {
              return Module._TypeRef_Rank(typeRef);
          };

          Module.typeHelpers.elementName = function (typeRef) {
              var stringTypeRef = Module.typeHelpers.findType('String');
              var responseValueRef = Module.eggShell.allocateData(stringTypeRef);
              Module._TypeRef_ElementName(Module.eggShell.v_userShell, typeRef, responseValueRef.typeRef, responseValueRef.dataRef);
              var response = Module.eggShell.readString(responseValueRef);
              Module.eggShell.deallocateData(responseValueRef);
              return response;
          };

          Module.typeHelpers.subElementCount = function (typeRef) {
              return Module._TypeRef_SubElementCount(typeRef);
          };

          Module.typeHelpers.subElementByIndex = function (typeRef, index) {
              return Module._TypeRef_GetSubElementByIndex(typeRef, index);
          };

          Module.typeHelpers.isCluster = function (typeRef) {
              return Module._TypeRef_IsCluster(typeRef) !== 0;
          };

          Module.typeHelpers.isArray = function (typeRef) {
              return Module._TypeRef_IsArray(typeRef) !== 0;
          };

          Module.typeHelpers.isBoolean = function (typeRef) {
              return Module._TypeRef_IsBoolean(typeRef) !== 0;
          };

          Module.typeHelpers.isInteger = function (typeRef) {
              return Module._TypeRef_IsInteger(typeRef) !== 0;
          };

          Module.typeHelpers.isSigned = function (typeRef) {
              return Module._TypeRef_IsSigned(typeRef) !== 0;
          };

          Module.typeHelpers.isEnum = function (typeRef) {
              return Module._TypeRef_IsEnum(typeRef) !== 0;
          };

          Module.typeHelpers.isFloat = function (typeRef) {
              return Module._TypeRef_IsFloat(typeRef) !== 0;
          };

          Module.typeHelpers.isString = function (typeRef) {
              return Module._TypeRef_IsString(typeRef) !== 0;
          };

          Module.typeHelpers.isPath = function (typeRef) {
              return Module._TypeRef_IsPath(typeRef) !== 0;
          };

          Module.typeHelpers.isTimestamp = function (typeRef) {
              return Module._TypeRef_IsTimestamp(typeRef) !== 0;
          };

          Module.typeHelpers.isComplex = function (typeRef) {
              return Module._TypeRef_IsComplex(typeRef) !== 0;
          };

          Module.typeHelpers.isAnalogWaveform = function (typeRef) {
              return Module._TypeRef_IsAnalogWaveform(typeRef) !== 0;
          };

          Module.typeHelpers.isJSObjectRefnum = function (typeRef) {
              return Module._TypeRef_IsJavaScriptStaticRefNum(typeRef) !== 0 ||
                     Module._TypeRef_IsJavaScriptDynamicRefNum(typeRef) !== 0;
          };

          Module.typeHelpers.isJSObjectStaticRefnum = function (typeRef) {
              return Module._TypeRef_IsJavaScriptStaticRefNum(typeRef) !== 0;
          };

          Module.typeHelpers.isJSObjectDynamicRefnum = function (typeRef) {
              return Module._TypeRef_IsJavaScriptDynamicRefNum(typeRef) !== 0;
          };

          var typeHandlers = [
              {
                  // JSObjectRefnum is Integer, so it should be before Integer
                  typeChecker: Module.typeHelpers.isJSObjectRefnum,
                  dispatcher: dispatchVisitJSObjectRefnum
              },
              {
                  typeChecker: Module.typeHelpers.isBoolean,
                  dispatcher: dispatchVisitBoolean
              },
              {
                  // Enum is wrapping an integer, so it needs to be evaluated first.
                  typeChecker: Module.typeHelpers.isEnum,
                  dispatcher: dispatchVisitEnum
              },
              {
                  typeChecker: Module.typeHelpers.isInteger,
                  dispatcher: dispatchVisitInteger
              },
              {
                  typeChecker: Module.typeHelpers.isFloat,
                  dispatcher: dispatchVisitFloat
              },
              {
                  // String is an array of UTF-8 chars so it is evaluated before array.
                  typeChecker: Module.typeHelpers.isString,
                  dispatcher: dispatchVisitString
              },
              {
                  typeChecker: Module.typeHelpers.isComplex,
                  dispatcher: dispatchVisitComplex
              },
              {
                  typeChecker: Module.typeHelpers.isAnalogWaveform,
                  dispatcher: dispatchVisitAnalogWaveform
              },
              {
                  typeChecker: Module.typeHelpers.isTimestamp,
                  dispatcher: dispatchVisitTimestamp
              },
              {
                  typeChecker: Module.typeHelpers.isPath,
                  dispatcher: dispatchVisitPath
              },
              {
                  typeChecker: Module.typeHelpers.isArray,
                  dispatcher: dispatchVisitArray
              },
              {
                  // Cluster is evaluated last because Complex, AnalogWaveform, Path and Timestamps
                  // are internally also clusters.
                  typeChecker: Module.typeHelpers.isCluster,
                  dispatcher: dispatchVisitCluster
              }
          ];

          Module.typeHelpers.findTypeDispatcher = function (typeRef) {
              var i = 0,
                  typeHandler;

              for (i = 0; i < typeHandlers.length; i += 1) {
                  typeHandler = typeHandlers[i];
                  if (typeHandler.typeChecker(typeRef) === true) {
                      return typeHandler.dispatcher;
                  }
              }
              return undefined;
          };

          Module.typeHelpers.testNeedsUpdateAndReset = function (typeRef) {
              return Module._TypeRef_TestNeedsUpdateAndReset(typeRef) !== 0;
          };

          Module.typeHelpers.testNeedsUpdateWithoutReset = function (typeRef) {
              return Module._TypeRef_TestNeedsUpdateWithoutReset(typeRef) !== 0;
          };
      };
  }());
  var assignTypeHelpers$1 = assignTypeHelpers;

  // Copyright (c) 2020 National Instruments
  // SPDX-License-Identifier: MIT

  const isCharacterAlphabetOrNonAscii = function (codePoint) {
      return ((codePoint >= 0x41 && codePoint <= 0x5A) || (codePoint >= 0x61 && codePoint <= 0x7A) || (codePoint > 0x7F));
  };

  const encodeIdentifier = function (str) {
      if (typeof str !== 'string' || str === '') {
          throw new Error('Identifier must be a non-empty string. Found: ' + str);
      }

      let encoded = '',
          codePoint = str.charCodeAt(0),
          ch = str.charAt(0);

      if (!isCharacterAlphabetOrNonAscii(codePoint)) {
          encoded += '%' + codePoint.toString(16).toUpperCase();
      } else {
          encoded += ch;
      }

      for (let i = 1; i < str.length; i += 1) {
          codePoint = str.charCodeAt(i);
          ch = str.charAt(i);

          // Do not encode if it is a number [0-9] or uppercase letter [A-Z] or lowercase [a-z] or any of these [*+_-$] or a non-ascii character.
          if ((codePoint >= 0x30 && codePoint <= 0x39) || (codePoint >= 0x41 && codePoint <= 0x5A) || (codePoint >= 0x61 && codePoint <= 0x7A) ||
              codePoint === 0x24 || codePoint === 0x2A || codePoint === 0x2B || codePoint === 0x2D || codePoint === 0x5F || codePoint > 0x7F) {
              encoded += ch;
          } else {
              encoded += '%' + codePoint.toString(16).toUpperCase();
          }
      }

      return encoded;
  };

  const decodeIdentifier = function (str) {
      if (typeof str !== 'string' || str === '') {
          throw new Error('Identifier must be a non-empty string. Found: ' + str);
      }

      return decodeURIComponent(str);
  };

  var staticHelpers = {
      encodeIdentifier,
      decodeIdentifier
  };

  // Copyright (c) 2020 National Instruments

  var assignEggShell;
  (function () {
      // Static Private Variables (all vireo instances)
      // None

      // Vireo Core Mixin Function
      assignEggShell = function (Module, publicAPI) {
          Module.eggShell = {};
          publicAPI.eggShell = {};

          // Private Instance Variables (per vireo instance)
          var POINTER_SIZE = 4;
          var DOUBLE_SIZE = 8;
          var LENGTH_SIZE = 4;

          // Keep in sync with EggShellResult in CEntryPoints.h
          var EGGSHELL_RESULT = {
              SUCCESS: 0,
              OBJECT_NOT_FOUND_AT_PATH: 1,
              UNEXPECTED_OBJECT_TYPE: 2,
              INVALID_RESULT_POINTER: 3,
              UNABLE_TO_CREATE_RETURN_BUFFER: 4,
              INVALID_TYPE_REF: 5,
              MISMATCHED_ARRAY_RANK: 6,
              UNABLE_TO_PARSE_DATA: 7,
              UNABLE_TO_ALLOCATE_DATA: 8,
              UNABLE_TO_DEALLOCATE_DATA: 9,
              INVALID_DATA_POINTER: 10
          };
          var eggShellResultEnum = {};
          eggShellResultEnum[EGGSHELL_RESULT.SUCCESS] = 'Success';
          eggShellResultEnum[EGGSHELL_RESULT.OBJECT_NOT_FOUND_AT_PATH] = 'ObjectNotFoundAtPath';
          eggShellResultEnum[EGGSHELL_RESULT.UNEXPECTED_OBJECT_TYPE] = 'UnexpectedObjectType';
          eggShellResultEnum[EGGSHELL_RESULT.INVALID_RESULT_POINTER] = 'InvalidResultPointer';
          eggShellResultEnum[EGGSHELL_RESULT.UNABLE_TO_CREATE_RETURN_BUFFER] = 'UnableToCreateReturnBuffer';
          eggShellResultEnum[EGGSHELL_RESULT.INVALID_TYPE_REF] = 'InvalidTypeRef';
          eggShellResultEnum[EGGSHELL_RESULT.MISMATCHED_ARRAY_RANK] = 'MismatchedArrayRank';
          eggShellResultEnum[EGGSHELL_RESULT.UNABLE_TO_PARSE_DATA] = 'UnableToParseData';
          eggShellResultEnum[EGGSHELL_RESULT.UNABLE_TO_ALLOCATE_DATA] = 'UnableToAllocateData';
          eggShellResultEnum[EGGSHELL_RESULT.UNABLE_TO_DEALLOCATE_DATA] = 'UnableToDeallocateData';
          eggShellResultEnum[EGGSHELL_RESULT.INVALID_DATA_POINTER] = 'InvalidDataPointer';

          // Keep in sync with NIError in DataTypes.h
          var niErrorEnum = {
              0: 'Success',
              1: 'InsufficientResources',
              2: 'ResourceNotFound',
              3: 'ArrayRankMismatch',
              4: 'CantDecode',
              5: 'CantEncode',
              6: 'LogicFailure',
              7: 'ValueTruncated'
          };

          // Create shell for vireo instance
          Module.eggShell.create = function (parentTypeManager) {
              return Module._EggShell_Create(parentTypeManager);
          };
          Module.eggShell.delete = function (typeManager) {
              Module._EggShell_Delete(typeManager);
          };
          Module.eggShell.v_root = Module.eggShell.create(0);
          Module.eggShell.v_userShell = Module.eggShell.create(Module.eggShell.v_root);

          // Exported functions
          publicAPI.eggShell.setPrintFunction = function (fn) {
              if (typeof fn !== 'function') {
                  throw new Error('Print must be a callable function');
              }

              Module.vireoPrint = fn;
          };

          publicAPI.eggShell.setPrintErrorFunction = function (fn) {
              if (typeof fn !== 'function') {
                  throw new Error('PrintError must be a callable function');
              }

              Module.vireoPrintErr = fn;
          };

          Module.eggShell.executeSlicesWakeUpCallback = function () {
              // By default do no action
          };

          publicAPI.eggShell.setExecuteSlicesWakeUpCallback = function (fn) {
              if (typeof fn !== 'function') {
                  throw new Error('Execute slices wake-up callback must be a callable function');
              }

              Module.eggShell.executeSlicesWakeUpCallback = fn;
          };

          publicAPI.eggShell.internal_module_do_not_use_or_you_will_be_fired = Module;

          // Exporting functions to both Module.eggShell and publicAPI.eggShell is not normal
          // This is unique to the eggShell API as it is consumed by other modules as well as users
          Module.eggShell.maxExecWakeUpTime = publicAPI.eggShell.maxExecWakeUpTime = function () {
              return Module._Vireo_MaxExecWakeUpTime();
          };

          Module.eggShell.reboot = publicAPI.eggShell.reboot = function () {
              // TODO abort all http requests
              // TODO reset internal jsli functions
              Module.eggShell.delete(Module.eggShell.v_userShell);
              Module.eggShell.delete(Module.eggShell.v_root);
              Module.eggShell.v_root = Module.eggShell.create(0);
              Module.eggShell.v_userShell = Module.eggShell.create(Module.eggShell.v_root);
          };

          Module.eggShell.createValueRef = function (typeRef, dataRef) {
              if (typeof typeRef !== 'number' || typeof dataRef !== 'number' ||
                  (typeRef <= 0 || dataRef <= 0)) {
                  return undefined;
              }
              return Object.freeze({
                  typeRef: typeRef,
                  dataRef: dataRef
              });
          };

          Module.eggShell.allocateData = function (typeRef) {
              var stack = Module.stackSave();

              var dataStackPointer = Module.stackAlloc(POINTER_SIZE);
              var eggShellResult = Module._EggShell_AllocateData(Module.eggShell.v_userShell, typeRef, dataStackPointer);
              if (eggShellResult !== EGGSHELL_RESULT.SUCCESS) {
                  throw new Error('A new ValueRef could not be allocated for the following reason: ' + eggShellResultEnum[eggShellResult] +
                      ' (error code: ' + eggShellResult + ')' +
                      ' (typeRef: ' + typeRef + ')');
              }

              var dataRef = Module.getValue(dataStackPointer, 'i32');
              var allocatedValueRef = Module.eggShell.createValueRef(typeRef, dataRef);

              Module.stackRestore(stack);
              return allocatedValueRef;
          };

          Module.eggShell.deallocateData = function (valueRef) {
              var eggShellResult = Module._EggShell_DeallocateData(Module.eggShell.v_userShell, valueRef.typeRef, valueRef.dataRef);
              if (eggShellResult !== EGGSHELL_RESULT.SUCCESS) {
                  throw new Error('A ValueRef could not be deallocated for the following reason: ' + eggShellResultEnum[eggShellResult] +
                      ' (error code: ' + eggShellResult + ')' +
                      ' (typeRef: ' + valueRef.typeRef + ')' +
                      ' (dataRef: ' + valueRef.dataRef + ')');
              }
          };

          Module.eggShell.reinitializeToDefault = publicAPI.eggShell.reinitializeToDefault = function (valueRef) {
              var eggShellResult = Module._EggShell_ReinitializeToDefault(Module.eggShell.v_userShell, valueRef.typeRef, valueRef.dataRef);
              if (eggShellResult !== EGGSHELL_RESULT.SUCCESS) {
                  throw new Error('The ValueRef could not be reinitialized to default for the following reason: ' + eggShellResultEnum[eggShellResult] +
                      ' (error code: ' + eggShellResult + ')' +
                      ' (typeRef: ' + valueRef.typeRef + ')');
              }
          };

          Module.eggShell.findValueRef = publicAPI.eggShell.findValueRef = function (vi, path) {
              var stack = Module.stackSave();

              var viStackPointer = Module.coreHelpers.writeJSStringToStack(vi);
              var pathStackPointer = Module.coreHelpers.writeJSStringToStack(path);
              var typeStackPointer = Module.stackAlloc(POINTER_SIZE);
              var dataStackPointer = Module.stackAlloc(POINTER_SIZE);

              var eggShellResult = Module._EggShell_FindValue(Module.eggShell.v_userShell, viStackPointer, pathStackPointer, typeStackPointer, dataStackPointer);
              if (eggShellResult !== EGGSHELL_RESULT.SUCCESS && eggShellResult !== EGGSHELL_RESULT.OBJECT_NOT_FOUND_AT_PATH) {
                  throw new Error('A ValueRef could not be made for the following reason: ' + eggShellResultEnum[eggShellResult] +
                      ' (error code: ' + eggShellResult + ')' +
                      ' (vi name: ' + vi + ')' +
                      ' (path: ' + path + ')');
              }

              var typeRef, dataRef, valueRef;
              if (eggShellResult === EGGSHELL_RESULT.SUCCESS) {
                  typeRef = Module.getValue(typeStackPointer, 'i32');
                  dataRef = Module.getValue(dataStackPointer, 'i32');
                  valueRef = Module.eggShell.createValueRef(typeRef, dataRef);
              } else {
                  valueRef = undefined;
              }

              Module.stackRestore(stack);
              return valueRef;
          };

          Module.eggShell.findSubValueRef = publicAPI.eggShell.findSubValueRef = function (valueRef, subPath) {
              var stack = Module.stackSave();

              var subPathStackPointer = Module.coreHelpers.writeJSStringToStack(subPath);
              var typeStackPointer = Module.stackAlloc(POINTER_SIZE);
              var dataStackPointer = Module.stackAlloc(POINTER_SIZE);

              var eggShellResult = Module._EggShell_FindSubValue(Module.eggShell.v_userShell, valueRef.typeRef, valueRef.dataRef, subPathStackPointer, typeStackPointer, dataStackPointer);
              if (eggShellResult !== EGGSHELL_RESULT.SUCCESS && eggShellResult !== EGGSHELL_RESULT.OBJECT_NOT_FOUND_AT_PATH) {
                  throw new Error('A ValueRef could not be made for the following reason: ' + eggShellResultEnum[eggShellResult] +
                      ' (error code: ' + eggShellResult + ')' +
                      ' (type name: ' + Module.typeHelpers.typeName(valueRef.typeRef) + ')' +
                      ' (subpath: ' + subPath + ')');
              }

              var typeRef, dataRef, subValueRef;
              if (eggShellResult === EGGSHELL_RESULT.SUCCESS) {
                  typeRef = Module.getValue(typeStackPointer, 'i32');
                  dataRef = Module.getValue(dataStackPointer, 'i32');
                  subValueRef = Module.eggShell.createValueRef(typeRef, dataRef);
              } else {
                  subValueRef = undefined;
              }

              Module.stackRestore(stack);
              return subValueRef;
          };

          Module.eggShell.readValueRefObject = publicAPI.eggShell.readValueRefObject = function (valueRef) {
              var typeRef = valueRef.typeRef;
              var valueRefs = {};

              if (Module.typeHelpers.isCluster(typeRef) === false) {
                  throw new Error('A ValueRefObject could not be made for the following reason: ' + eggShellResultEnum[EGGSHELL_RESULT.UNEXPECTED_OBJECT_TYPE] +
                      ' (error code: ' + EGGSHELL_RESULT.UNEXPECTED_OBJECT_TYPE + ')' +
                      ' (type name: ' + Module.typeHelpers.typeName(typeRef) + ')');
              }

              var fieldCount = Module.typeHelpers.subElementCount(typeRef);

              var fieldTypeRef, fieldNameEncoded, fieldName;
              for (var i = 0; i < fieldCount; i += 1) {
                  fieldTypeRef = Module.typeHelpers.subElementByIndex(typeRef, i);
                  fieldNameEncoded = Module.typeHelpers.elementName(fieldTypeRef);
                  fieldName = staticHelpers.decodeIdentifier(fieldNameEncoded);
                  valueRefs[fieldName] = Module.eggShell.findSubValueRef(valueRef, fieldNameEncoded);
              }

              return valueRefs;
          };

          Module.eggShell.reflectOnValueRef = publicAPI.eggShell.reflectOnValueRef = function (typeVisitor, valueRef, data) {
              if (typeof valueRef !== 'object' || valueRef === null) {
                  throw new Error('valueRef must be an object. Found: ' + valueRef);
              }

              if (typeof typeVisitor !== 'object' || typeVisitor === null) {
                  throw new Error('typeVisitor must be an object. Found: ' + typeVisitor);
              }

              var typeRef = valueRef.typeRef,
                  dispatchFunction = Module.typeHelpers.findTypeDispatcher(typeRef);

              if (dispatchFunction === undefined) {
                  throw new Error('Unexpected type. Is typeRef pointing to a valid type?. Type found: ' + typeRef === 0 ? 'invalid type' : Module.typeHelpers.typeName(typeRef));
              }

              return dispatchFunction(typeVisitor, valueRef, data);
          };

          Module.eggShell.testNeedsUpdateAndReset = publicAPI.eggShell.testNeedsUpdateAndReset = function (valueRef) {
              if (typeof valueRef !== 'object' || valueRef === null) {
                  throw new Error('valueRef must be an object. Found: ' + valueRef);
              }

              return Module.typeHelpers.testNeedsUpdateAndReset(valueRef.typeRef);
          };

          Module.eggShell.testNeedsUpdateWithoutReset = function (valueRef) {
              if (typeof valueRef !== 'object' || valueRef === null) {
                  throw new Error('valueRef must be an object. Found: ' + valueRef);
              }

              return Module.typeHelpers.testNeedsUpdateWithoutReset(valueRef.typeRef);
          };

          Module.eggShell.readDouble = publicAPI.eggShell.readDouble = function (valueRef) {
              var stack = Module.stackSave();
              var resultPointer = Module.stackAlloc(DOUBLE_SIZE);

              // TODO mraj should we try to resolve the typeref name on error for more context?
              var eggShellResult = Module._EggShell_ReadDouble(Module.eggShell.v_userShell, valueRef.typeRef, valueRef.dataRef, resultPointer);
              if (eggShellResult !== EGGSHELL_RESULT.SUCCESS) {
                  throw new Error('Could not run readDouble for the following reason: ' + eggShellResultEnum[eggShellResult] +
                      ' (error code: ' + eggShellResult + ')' +
                      ' (typeRef: ' + valueRef.typeRef + ')' +
                      ' (dataRef: ' + valueRef.dataRef + ')');
              }
              var result = Module.getValue(resultPointer, 'double');

              Module.stackRestore(stack);
              return result;
          };

          Module.eggShell.writeDouble = publicAPI.eggShell.writeDouble = function (valueRef, value) {
              if (typeof value !== 'number') {
                  throw new Error('Expected value to write to be of type number, instead got: ' + value);
              }

              var eggShellResult = Module._EggShell_WriteDouble(Module.eggShell.v_userShell, valueRef.typeRef, valueRef.dataRef, value);
              if (eggShellResult !== EGGSHELL_RESULT.SUCCESS) {
                  throw new Error('Could not run writeDouble for the following reason: ' + eggShellResultEnum[eggShellResult] +
                      ' (error code: ' + eggShellResult + ')' +
                      ' (typeRef: ' + valueRef.typeRef + ')' +
                      ' (dataRef: ' + valueRef.dataRef + ')');
              }
          };

          Module.eggShell.readJSON = publicAPI.eggShell.readJSON = function (valueRef) {
              var stack = Module.stackSave(); // Stack save only needed for input parameter string or array

              var type = 'JSON';
              var typeStackPointer = Module.coreHelpers.writeJSStringToStack(type);

              var stringTypeRef = Module.typeHelpers.findType('String');
              var jsonResponseValueRef = Module.eggShell.allocateData(stringTypeRef);
              var eggShellError = Module._EggShell_ReadValueString(Module.eggShell.v_userShell, valueRef.typeRef, valueRef.dataRef, typeStackPointer, jsonResponseValueRef.typeRef, jsonResponseValueRef.dataRef);
              if (eggShellError !== 0) {
                  throw new Error('Performing readJSON failed for the following reason: ' + eggShellResultEnum[eggShellError] +
                      ' (error code: ' + eggShellError + ')' +
                      ' (typeRef: ' + valueRef.typeRef + ')' +
                      ' (dataRef: ' + valueRef.dataRef + ')');
              }

              var response = Module.eggShell.readString(jsonResponseValueRef);
              Module.eggShell.deallocateData(jsonResponseValueRef);
              Module.stackRestore(stack);
              return response;
          };

          Module.eggShell.writeJSON = publicAPI.eggShell.writeJSON = function (valueRef, value) {
              var stack = Module.stackSave();

              var type = 'JSON';
              var valueStackPointer = Module.coreHelpers.writeJSStringToHeap(value);
              var typeStackPointer = Module.coreHelpers.writeJSStringToStack(type);

              var eggShellError = Module._EggShell_WriteValueString(Module.eggShell.v_userShell, valueRef.typeRef, valueRef.dataRef, typeStackPointer, valueStackPointer);
              if (eggShellError !== 0) {
                  throw new Error('Performing writeJSON failed for the following reason: ' + eggShellResultEnum[eggShellError] +
                      ' (error code: ' + eggShellError + ')' +
                      ' (typeRef: ' + valueRef.typeRef + ')' +
                      ' (dataRef: ' + valueRef.dataRef + ')');
              }

              Module._free(valueStackPointer);
              Module.stackRestore(stack);
          };

          Module.eggShell.dataGetArrayBegin = function (dataRef) {
              return Module._Data_GetArrayBegin(dataRef);
          };

          Module.eggShell.dataGetArrayLength = function (dataRef) {
              return Module._Data_GetArrayLength(dataRef);
          };

          Module.eggShell.readString = publicAPI.eggShell.readString = function (valueRef) {
              if (Module.typeHelpers.isString(valueRef.typeRef) === false) {
                  throw new Error('Performing readString failed for the following reason: ' + eggShellResultEnum[EGGSHELL_RESULT.UNEXPECTED_OBJECT_TYPE] +
                      ' (error code: ' + EGGSHELL_RESULT.UNEXPECTED_OBJECT_TYPE + ')' +
                      ' (typeRef: ' + valueRef.typeRef + ')' +
                      ' (dataRef: ' + valueRef.dataRef + ')');
              }
              var arrayBegin = Module.eggShell.dataGetArrayBegin(valueRef.dataRef);
              var totalLength = Module.eggShell.dataGetArrayLength(valueRef.dataRef);
              var result = Module.coreHelpers.sizedUtf8ArrayToJSString(Module.HEAPU8, arrayBegin, totalLength);
              return result;
          };

          Module.eggShell.writeString = publicAPI.eggShell.writeString = function (valueRef, inputString) {
              if (Module.typeHelpers.isString(valueRef.typeRef) === false) {
                  throw new Error('Performing writeString failed for the following reason: ' + eggShellResultEnum[EGGSHELL_RESULT.UNEXPECTED_OBJECT_TYPE] +
                      ' (error code: ' + EGGSHELL_RESULT.UNEXPECTED_OBJECT_TYPE + ')' +
                      ' (typeRef: ' + valueRef.typeRef + ')' +
                      ' (dataRef: ' + valueRef.dataRef + ')');
              }

              if (typeof inputString !== 'string') {
                  throw new Error('Expected string input to be of type string, instead got: ' + inputString);
              }

              var strLength = Module.lengthBytesUTF8(inputString);
              Module.eggShell.resizeArray(valueRef, [strLength]);
              var typedArray = Module.eggShell.readTypedArray(valueRef);
              var bytesWritten = Module.coreHelpers.jsStringToSizedUTF8Array(inputString, typedArray, 0, strLength);
              if (bytesWritten !== strLength) {
                  throw new Error('Could not write JS string to memory');
              }
          };

          var findCompatibleTypedArrayConstructor = function (typeRef) {
              var subTypeRef, isSigned, size;
              // String will go down the Array code path a bit as is so check before array checks
              if (Module.typeHelpers.isString(typeRef)) {
                  return Uint8Array; // exposes UTF-8 encoded array to client
              } else if (Module.typeHelpers.isArray(typeRef)) {
                  subTypeRef = Module.typeHelpers.subElementByIndex(typeRef, 0);
                  if (Module.typeHelpers.isBoolean(subTypeRef)) {
                      return Uint8Array;
                  } else if (Module.typeHelpers.isJSObjectRefnum(subTypeRef)) {
                      return Uint32Array;
                  } else if (Module.typeHelpers.isInteger(subTypeRef)) { // Used for Enums and Integers
                      isSigned = Module.typeHelpers.isSigned(subTypeRef);
                      size = Module.typeHelpers.topAQSize(subTypeRef);
                      if (isSigned === true) {
                          switch (size) {
                          case 1:
                              return Int8Array;
                          case 2:
                              return Int16Array;
                          case 4:
                              return Int32Array;
                          default:
                              return undefined;
                          }
                      } else {
                          switch (size) {
                          case 1:
                              return Uint8Array;
                          case 2:
                              return Uint16Array;
                          case 4:
                              return Uint32Array;
                          default:
                              return undefined;
                          }
                      }
                  } else if (Module.typeHelpers.isFloat(subTypeRef)) {
                      size = Module.typeHelpers.topAQSize(subTypeRef);
                      switch (size) {
                      case 4:
                          return Float32Array;
                      case 8:
                          return Float64Array;
                      default:
                          return undefined;
                      }
                  }
              }
              return undefined;
          };

          Module.eggShell.isTypedArrayCompatible = publicAPI.eggShell.isTypedArrayCompatible = function (valueRef) {
              return findCompatibleTypedArrayConstructor(valueRef.typeRef) !== undefined;
          };

          Module.eggShell.getArrayDimensions = publicAPI.eggShell.getArrayDimensions = function (valueRef) {
              if (!Module.typeHelpers.isArray(valueRef.typeRef)) {
                  throw new Error('Performing getArrayDimensions failed for the following reason: ' + eggShellResultEnum[EGGSHELL_RESULT.UNEXPECTED_OBJECT_TYPE] +
                      ' (error code: ' + EGGSHELL_RESULT.UNEXPECTED_OBJECT_TYPE + ')' +
                      ' (typeRef: ' + valueRef.typeRef + ')' +
                      ' (dataRef: ' + valueRef.dataRef + ')');
              }

              var rank = Module.typeHelpers.typeRank(valueRef.typeRef);
              var stack = Module.stackSave();
              var dimensionsPointer = Module.stackAlloc(rank * LENGTH_SIZE);
              Module._Data_GetArrayDimensions(valueRef.dataRef, dimensionsPointer);
              var dimensions = [];
              var i;
              for (i = 0; i < rank; i += 1) {
                  dimensions.push(Module.getValue(dimensionsPointer + (i * LENGTH_SIZE), 'i32'));
              }
              Module.stackRestore(stack);

              return dimensions;
          };

          // Note: If you are directly writing JavaScript numbers (floating point doubles) to
          // integer TypedArray views then be aware that integer TypedArray views will truncate
          // overflowing values as specified in TypedArray conversion operations:
          // https://tc39.es/ecma262/#table-the-typedarray-constructors
          // Vireo requires that overflowing JavaScript numbers written to Vireo integers
          // are saturated instead of truncated. Make sure to perform Vireo's float-to-int
          // conversion algorithm in JavaScript before directly writing to integer TypeArray views.
          Module.eggShell.readTypedArray = publicAPI.eggShell.readTypedArray = function (valueRef) {
              var TypedArrayConstructor = findCompatibleTypedArrayConstructor(valueRef.typeRef);
              if (TypedArrayConstructor === undefined) {
                  throw new Error('Performing readTypedArray failed for the following reason: ' + eggShellResultEnum[EGGSHELL_RESULT.UNEXPECTED_OBJECT_TYPE] +
                      ' (error code: ' + EGGSHELL_RESULT.UNEXPECTED_OBJECT_TYPE + ')' +
                      ' (typeRef: ' + valueRef.typeRef + ')' +
                      ' (dataRef: ' + valueRef.dataRef + ')');
              }
              var arrayBegin = Module.eggShell.dataGetArrayBegin(valueRef.dataRef);
              var totalLength = Module.eggShell.dataGetArrayLength(valueRef.dataRef);
              var typedArray = new TypedArrayConstructor(Module.HEAP8.buffer, arrayBegin, totalLength);
              return typedArray;
          };

          Module.eggShell.isSupportedAndCompatibleArrayType = function (valueRef, typedArrayValue) {
              var TypedArrayConstructor = findCompatibleTypedArrayConstructor(valueRef.typeRef);
              return (TypedArrayConstructor !== undefined && typedArrayValue instanceof TypedArrayConstructor);
          };

          // Note: When creating integer TypedArrays views from JavaScript numbers to write to
          // Vireo using writeTypedArray be aware that integer TypedArray views will truncate
          // overflowing values as specified in TypedArray conversion operations:
          // https://tc39.es/ecma262/#table-the-typedarray-constructors
          // Make sure to perform Vireo's float-to-int conversion algorithm in JavaScript when creating
          // integer TypedArray views from JavaScript numbers to write to Vireo memory.
          Module.eggShell.writeTypedArray = publicAPI.eggShell.writeTypedArray = function (valueRef, typedArrayValue) {
              var TypedArrayConstructor = findCompatibleTypedArrayConstructor(valueRef.typeRef);
              if (TypedArrayConstructor === undefined || !(typedArrayValue instanceof TypedArrayConstructor)) {
                  throw new Error('Performing writeTypedArray failed for the following reason: ' + eggShellResultEnum[EGGSHELL_RESULT.UNEXPECTED_OBJECT_TYPE] +
                      ' (error code: ' + EGGSHELL_RESULT.UNEXPECTED_OBJECT_TYPE + ')' +
                      ' (typeRef: ' + valueRef.typeRef + ')' +
                      ' (dataRef: ' + valueRef.dataRef + ')');
              }

              var arrayTotalLength = Module.eggShell.dataGetArrayLength(valueRef.dataRef);
              var totalLength = typedArrayValue.length;
              if (totalLength !== arrayTotalLength) {
                  throw new Error('TypedArray total length must be ' + arrayTotalLength + ' instead got ' + totalLength);
              }
              var arrayBegin = Module.eggShell.dataGetArrayBegin(valueRef.dataRef);
              var typedArray = new TypedArrayConstructor(Module.HEAP8.buffer, arrayBegin, totalLength);
              typedArray.set(typedArrayValue);
          };

          Module.eggShell.resizeArray = publicAPI.eggShell.resizeArray = function (valueRef, newDimensions) {
              if (!Array.isArray(newDimensions)) {
                  throw new Error('Expected newDimensions to be an array of dimension lengths, instead got: ' + newDimensions);
              }
              var stack = Module.stackSave();
              var newDimensionsLength = newDimensions.length;
              var dimensionsPointer = Module.stackAlloc(newDimensionsLength * LENGTH_SIZE);
              var i, currentDimension;
              for (i = 0; i < newDimensionsLength; i += 1) {
                  currentDimension = newDimensions[i];

                  if (typeof currentDimension !== 'number') {
                      throw new Error('Expected all dimensions of newDimensions to be numeric values for dimension length, instead got' + currentDimension);
                  }
                  Module.setValue(dimensionsPointer + (i * LENGTH_SIZE), currentDimension, 'i32');
              }
              var eggShellResult = Module._EggShell_ResizeArray(Module.eggShell.v_userShell, valueRef.typeRef, valueRef.dataRef, newDimensionsLength, dimensionsPointer);
              if (eggShellResult !== EGGSHELL_RESULT.SUCCESS) {
                  throw new Error('Resizing the array failed for the following reason: ' + eggShellResultEnum[eggShellResult] +
                  ' (error code: ' + eggShellResult + ')' +
                  ' (typeRef: ' + valueRef.typeRef + ')' +
                  ' (dataRef: ' + valueRef.dataRef + ')');
              }
              Module.stackRestore(stack);
          };

          Module.eggShell.getVariantAttribute = publicAPI.eggShell.getVariantAttribute = function (valueRef, attributeName) {
              var stack = Module.stackSave();

              var attributeNameStackPointer = Module.coreHelpers.writeJSStringToStack(attributeName);
              var typeStackPointer = Module.stackAlloc(POINTER_SIZE);
              var dataStackPointer = Module.stackAlloc(POINTER_SIZE);

              var eggShellResult = Module._EggShell_GetVariantAttribute(Module.eggShell.v_userShell, valueRef.typeRef, valueRef.dataRef, attributeNameStackPointer, typeStackPointer, dataStackPointer);
              if (eggShellResult !== EGGSHELL_RESULT.SUCCESS && eggShellResult !== EGGSHELL_RESULT.OBJECT_NOT_FOUND_AT_PATH) {
                  throw new Error('Could not get variant attribute for the following reason: ' + eggShellResultEnum[eggShellResult] +
                      ' (error code: ' + eggShellResult + ')' +
                      ' (type name: ' + Module.typeHelpers.typeName(valueRef.typeRef) + ')' +
                      ' (subpath: ' + attributeName + ')');
              }

              var typeRef, dataRef, resultValueRef;
              if (eggShellResult === EGGSHELL_RESULT.SUCCESS) {
                  typeRef = Module.getValue(typeStackPointer, 'i32');
                  dataRef = Module.getValue(dataStackPointer, 'i32');
                  resultValueRef = Module.eggShell.createValueRef(typeRef, dataRef);
              } else {
                  resultValueRef = undefined;
              }

              Module.stackRestore(stack);
              return resultValueRef;
          };

          // Note: Not exported as public api does not have ability to allocate arbitrary types
          // Instead call setVariantAttributeAs<Typename> for current allocatable types as variant attributes
          Module.eggShell.setVariantAttribute = function (valueRef, attributeName, attributeValueRef) {
              var stack = Module.stackSave();

              var attributeNameStackPointer = Module.coreHelpers.writeJSStringToStack(attributeName);
              var eggShellResult = Module._EggShell_SetVariantAttribute(Module.eggShell.v_userShell, valueRef.typeRef, valueRef.dataRef, attributeNameStackPointer, attributeValueRef.typeRef, attributeValueRef.dataRef);
              if (eggShellResult !== EGGSHELL_RESULT.SUCCESS) {
                  throw new Error('Could not set variant attribute for the following reason: ' + eggShellResultEnum[eggShellResult] +
                      ' (error code: ' + eggShellResult + ')' +
                      ' (type name: ' + Module.typeHelpers.typeName(valueRef.typeRef) + ')' +
                      ' (subpath: ' + attributeName + ')');
              }
              Module.stackRestore(stack);
          };

          Module.eggShell.setVariantAttributeAsString = publicAPI.eggShell.setVariantAttributeAsString = function (valueRef, attributeName, attributeValueString) {
              var stringTypeRef = Module.typeHelpers.findType('String');
              var attributeValueRef = Module.eggShell.allocateData(stringTypeRef);
              Module.eggShell.writeString(attributeValueRef, attributeValueString);
              Module.eggShell.setVariantAttribute(valueRef, attributeName, attributeValueRef);
              Module.eggShell.deallocateData(attributeValueRef);
          };

          Module.eggShell.deleteVariantAttribute = publicAPI.eggShell.deleteVariantAttribute = function (valueRef, attributeName) {
              var stack = Module.stackSave();

              var attributeNameStackPointer = Module.coreHelpers.writeJSStringToStack(attributeName);
              var eggShellResult = Module._EggShell_DeleteVariantAttribute(Module.eggShell.v_userShell, valueRef.typeRef, valueRef.dataRef, attributeNameStackPointer);
              if (eggShellResult !== EGGSHELL_RESULT.SUCCESS && eggShellResult !== EGGSHELL_RESULT.OBJECT_NOT_FOUND_AT_PATH) {
                  throw new Error('Could not delete variant attribute for the following reason: ' + eggShellResultEnum[eggShellResult] +
                      ' (error code: ' + eggShellResult + ')' +
                      ' (type name: ' + Module.typeHelpers.typeName(valueRef.typeRef) + ')' +
                      ' (subpath: ' + attributeName + ')');
              }
              var found = eggShellResult !== EGGSHELL_RESULT.OBJECT_NOT_FOUND_AT_PATH;

              Module.stackRestore(stack);
              return found;
          };

          // Internal api accessed from Module.javaScriptInvoke
          publicAPI.eggShell.readJavaScriptRefNum = function (valueRef) {
              var isJSObjectRefnum = Module.typeHelpers.isJSObjectRefnum(valueRef.typeRef);
              if (!isJSObjectRefnum) {
                  throw new Error('Performing readJavaScriptRefNum failed for the following reason: ' + eggShellResultEnum[EGGSHELL_RESULT.UNEXPECTED_OBJECT_TYPE] +
                      ' (error code: ' + EGGSHELL_RESULT.UNEXPECTED_OBJECT_TYPE + ')' +
                      ' (typeRef: ' + valueRef.typeRef + ')' +
                      ' (dataRef: ' + valueRef.dataRef + ')');
              }
              return Module.javaScriptInvoke.readJavaScriptRefNum(valueRef);
          };

          // Internal api accessed from Module.javaScriptInvoke
          publicAPI.eggShell.writeJavaScriptRefNum = function (valueRef, data) {
              var isJSObjectRefnum = Module.typeHelpers.isJSObjectRefnum(valueRef.typeRef);
              if (!isJSObjectRefnum) {
                  throw new Error('Performing writeJavaScriptRefNum failed for the following reason: ' + eggShellResultEnum[EGGSHELL_RESULT.UNEXPECTED_OBJECT_TYPE] +
                      ' (error code: ' + EGGSHELL_RESULT.UNEXPECTED_OBJECT_TYPE + ')' +
                      ' (typeRef: ' + valueRef.typeRef + ')' +
                      ' (dataRef: ' + valueRef.dataRef + ')');
              }
              Module.javaScriptInvoke.writeJavaScriptRefNum(valueRef, data);
          };

          // Internal api accessed from Module.javaScriptInvoke
          publicAPI.eggShell.isJavaScriptRefNumValid = function (valueRef) {
              var isJSObjectRefnum = Module.typeHelpers.isJSObjectRefnum(valueRef.typeRef);
              if (!isJSObjectRefnum) {
                  throw new Error('Performing isJavaScriptRefNumValid failed for the following reason: ' + eggShellResultEnum[EGGSHELL_RESULT.UNEXPECTED_OBJECT_TYPE] +
                      ' (error code: ' + EGGSHELL_RESULT.UNEXPECTED_OBJECT_TYPE + ')' +
                      ' (typeRef: ' + valueRef.typeRef + ')' +
                      ' (dataRef: ' + valueRef.dataRef + ')');
              }
              return Module.javaScriptInvoke.isJavaScriptRefNumValid(valueRef);
          };

          // Internal api accessed from Module.javaScriptInvoke
          publicAPI.eggShell.clearJavaScriptRefNum = function (valueRef) {
              var isJSObjectRefnum = Module.typeHelpers.isJSObjectRefnum(valueRef.typeRef);
              if (!isJSObjectRefnum) {
                  throw new Error('Performing clearJavaScriptRefnum failed for the following reason: ' + eggShellResultEnum[EGGSHELL_RESULT.UNEXPECTED_OBJECT_TYPE] +
                      ' (error code: ' + EGGSHELL_RESULT.UNEXPECTED_OBJECT_TYPE + ')' +
                      ' (typeRef: ' + valueRef.typeRef + ')' +
                      ' (dataRef: ' + valueRef.dataRef + ')');
              }

              var operationSuccessful = Module.javaScriptInvoke.clearJavaScriptRefNum(valueRef);
              if (!operationSuccessful) {
                  throw new Error('Performing clearJavaScriptRefnum failed for the following reason: ' + eggShellResultEnum[EGGSHELL_RESULT.INVALID_DATA_POINTER] +
                      ' (error code: ' + EGGSHELL_RESULT.INVALID_DATA_POINTER + ')' +
                      ' (typeRef: ' + valueRef.typeRef + ')' +
                      ' (dataRef: ' + valueRef.dataRef + ')');
              }
          };

          // **DEPRECATED**
          Module.eggShell.dataReadString = function (stringPointer) {
              var begin = Module._Data_GetStringBegin(stringPointer);
              var length = Module._Data_GetStringLength(stringPointer);
              var str = Module.coreHelpers.sizedUtf8ArrayToJSString(Module.HEAPU8, begin, length);
              return str;
          };

          Module.eggShell.loadVia = publicAPI.eggShell.loadVia = function (viaText, config) {
              if (typeof viaText !== 'string') {
                  throw new Error('Expected viaText to be a string');
              }

              if (viaText.length === 0) {
                  throw new Error('Empty viaText provided, nothing to run');
              }

              var viaTextLength = Module.lengthBytesUTF8(viaText);
              var viaTextPointer = Module.coreHelpers.writeJSStringToHeap(viaText);

              var printText = '',
                  printTextErr = '';
              var origPrint = Module.print,
                  origPrintErr = Module.printErr;

              Module.print = function (text) {
                  printText += text + '\n';
                  origPrint(text);
              };

              Module.printErr = function (textErr) {
                  printTextErr += textErr + '\n';
                  origPrintErr(textErr);
              };

              var debugging = (config && typeof config.debugging === 'boolean') ? config.debugging : false;
              var result = Module._EggShell_REPL(Module.eggShell.v_userShell, viaTextPointer, viaTextLength, debugging);
              Module._free(viaTextPointer);
              Module.print = origPrint;
              Module.printErr = origPrintErr;

              if (result !== 0) {
                  throw new Error('Loading VIA failed for the following reason: ' + niErrorEnum[result] +
                      ' (error code: ' + result + ')' +
                      ' (stdout: ' + printText + ')' +
                      ' (stderr: ' + printTextErr + ')');
              }
          };

          // executeSlicesUntilWait
          // numSlices (optional): The minimum number of slice sets to run before checking if maxTimeMS has passed.
          //    The larger the value the less overhead for execution and the quicker the diagram progresses
          //    One slice set corresponds to 10 slices and at a minimum one slice set executes per invocation
          // millisecondsToRun (optional): The amount of time in milliseconds vireo can execute slice sets before vireo saves state and returns
          // return value (type ExecSlicesResult):
          //     returns < 0 if should be called again ASAP, 0 if nothing to run, or positive value N if okay
          //     to delay up to N milliseconds before calling again
          Module.eggShell.executeSlicesUntilWait = publicAPI.eggShell.executeSlicesUntilWait = function (numSlices, millisecondsToRun) {
              return Module._EggShell_ExecuteSlices(Module.eggShell.v_userShell, numSlices, millisecondsToRun);
          };

          // Pumps vireo asynchronously until the currently loaded via has finished all clumps
          // Runs synchronously for a maximum of 4ms at a time to cooperate with browser and node.js execution environments
          // A good starting point for most vireo uses but can be copied and modified as needed
          // Returns a Promise that is resolved when execution has completed or reject when an error has occurred
          Module.eggShell.executeSlicesUntilClumpsFinished = publicAPI.eggShell.executeSlicesUntilClumpsFinished = function (originalCallback) {
              if (originalCallback !== undefined) {
                  throw new Error('The executeSlicesUntilClumpsFinished function no longer takes a callback and instead returns a Promise');
              }
              // These numbers may still need tuning.  They should also match the numbers in native
              // in CommandLine/main.cpp.  SLICE_SETS was lowered from 100000 because that was starving
              // other clumps and running too long before checking the timer.
              var SLICE_SETS_PER_TIME_CHECK = 10000;
              var MAXIMUM_VIREO_EXECUTION_TIME_MS = 4;
              var origExecuteSlicesWakeUpCallback = Module.eggShell.executeSlicesWakeUpCallback;

              var vireoResolve, vireoReject;
              var executionFinishedPromise = new Promise(function (resolve, reject) {
                  var cleanup = function () {
                      Module.eggShell.executeSlicesWakeUpCallback = origExecuteSlicesWakeUpCallback;
                  };

                  vireoResolve = function () {
                      cleanup();
                      resolve.apply(undefined, arguments);
                  };

                  vireoReject = function () {
                      cleanup();
                      reject.apply(undefined, arguments);
                  };
              });

              var timerToken;
              var runExecuteSlicesAsync = function () {
                  var execSlicesResult;
                  try {
                      execSlicesResult = Module.eggShell.executeSlicesUntilWait(SLICE_SETS_PER_TIME_CHECK, MAXIMUM_VIREO_EXECUTION_TIME_MS);
                  } catch (ex) {
                      timerToken = undefined;
                      setTimeout(vireoReject, 0, ex);
                      return;
                  }

                  if (execSlicesResult > 0) {
                      timerToken = setTimeout(runExecuteSlicesAsync, execSlicesResult);
                  } else if (execSlicesResult < 0) {
                      timerToken = setTimeout(runExecuteSlicesAsync, 0);
                  } else {
                      timerToken = undefined;
                      setTimeout(vireoResolve, 0);
                  }
              };

              Module.eggShell.executeSlicesWakeUpCallback = function () {
                  origExecuteSlicesWakeUpCallback();
                  if (timerToken === undefined) {
                      console.error('Attempted to wake up Vireo runtime but Vireo is not waiting');
                  } else {
                      clearTimeout(timerToken);
                      timerToken = undefined;
                      runExecuteSlicesAsync();
                  }
              };

              // Queue a microtask for starting execution
              Promise.resolve().then(function () {
                  runExecuteSlicesAsync();
              });

              return executionFinishedPromise;
          };

          Module.eggShell.setOccurrenceAsync = function (occurrence) {
              // TODO mraj currently setOccurrenceAsync is only called
              // by relatively slow operation, may need to change from setTimeout
              // to improve performance in the future
              setTimeout(function () {
                  Module._Occurrence_Set(occurrence);
                  Module.eggShell.executeSlicesWakeUpCallback.call(undefined);
              }, 0);
          };

          Module.eggShell.setOccurrence = function (occurrence) {
              Module._Occurrence_Set(occurrence);
          };
      };
  }());
  var assignEggShell$1 = assignEggShell;

  // Copyright (c) 2020 National Instruments
  // SPDX-License-Identifier: MIT

  var assignHttpClient;
  (function () {
      // Static Private Variables (all vireo instances)
      var TRUE = 1;
      var FALSE = 0;

      var NULL = 0;

      var DEFAULT_INVALID_HANDLE = 0;

      var ERRORS = {
          // Shared
          NO_ERROR: {
              CODE: 0,
              MESSAGE: ''
          },

          // penguin\lvaddon\errors\osnetwork\trunk\17.0\source\errors.nimxl
          InvalidRefnum: {
              CODE: -1967362020,
              MESSAGE: 'The provided refnum is invalid.'
          },

          // penguin\lvaddon\errors\lv\trunk\17.0\source\errors.nimxl
          mgArgErr: {
              CODE: 1,
              MESSAGE: 'An input parameter is invalid. For example if the input is a path, the path might contain a character not allowed by the OS such as ? or @.'
          },
          ncTimeOutErr: {
              CODE: 56,
              MESSAGE: 'The network operation exceeded the user-specified or system time limit.'
          },
          kNIHttpResultCouldNotConnect: {
              CODE: 363500,
              MESSAGE: 'Failed to connect to the specified hostname.  Be sure the specified hostname is correct, the server is running and configured to accept remote requests.'
          },
          kNIHttpResultAbortedByCallback: {
              CODE: 363508,
              MESSAGE: 'The request was aborted by the caller.'
          },
          kNIHttpResultRequestHeaderDoesNotExist: {
              CODE: 363528,
              MESSAGE: 'The specified request header does not exist.'
          },

          kNIHttpWebVINetworkError: {
              CODE: 363650,
              MESSAGE: 'A network error has occurred. Possible reasons for this error include Cross-Origin Resource Sharing (CORS) configuration issues between the client and the target server or that the client cannot reach the target server. Due to browser security restrictions, detailed information about the cause of the network error cannot be provided. You may find specific details about the cause of the network error in the browser development tools console or in the LabVIEW output window.'
          },
          kNIHttpWebVIHeaderInvalid: {
              CODE: 363651,
              MESSAGE: 'Setting a header or header value resulted in an error, possibly due to an invalid character in a header or header value. Verify that each header and header value contains only valid characters.'
          },
          kNIHttpWebVICookieFileUnsupported: {
              CODE: 363652,
              MESSAGE: 'This target does not support modification of the cookie file input. The browser manages saving cookies from an HTTP response and including cookies in HTTP requests on behalf of the user. The HTTP Client VIs cannot manipulate cookies directly. Set the cookie file input as either Not a path or an empty path for this target.'
          },
          kNIHttpWebVIVerifyServerUnsupported: {
              CODE: 363653,
              MESSAGE: 'This target does not support modification of the verify server input. The browser manages settings related to validation of a server\'s identity and establishing secure connections. Set the verify server input to True for this target.'
          },
          kNIHttpWebVIOutputFileUnsupported: {
              CODE: 363654,
              MESSAGE: 'This target does not support usage of an output file. Set output file as either Not a path or an empty path for this target.'
          },
          kNIHttpCORSNotRequired: {
              CODE: 363655,
              MESSAGE: 'This target is not subject to Cross-Origin Resource Sharing (CORS) restrictions and cannot perform CORS configuration. Do not attempt to perform CORS configuration on this target.'
          },
          kNIHttpWebVIProxyConfigUnsupported: {
              CODE: 363656,
              MESSAGE: 'This target does not support proxy server configuration using the HTTP Client VIs. The host browser or environment must be configured directly to change proxy server settings. Do not attempt to perform proxy server configuration on this target.'
          },
          kNIHttpWebVISSLConfigUnsupported: {
              CODE: 363657,
              MESSAGE: 'This target does not support SSL configuration using the HTTP Client VIs. The host browser or environment must be configured directly to change SSL settings. Do not attempt to perform SSL configuration on this target.'
          },

          kNIHttpResultInternalUndefinedError: {
              CODE: 363798,
              MESSAGE: 'The HTTP client produced an unknown error.'
          }
      };

      var DEFAULT_TIMEOUT_MS = 10000;
      var TIMEOUT_IMMEDIATELY_MS = 1;

      var RunningRequestsTracker;
      (function () {
          // Static private reference aliases
          // None

          // Constructor Function
          RunningRequestsTracker = function () {
              // Public Instance Properties
              // None

              // Private Instance Properties
              this._runningRequests = [];
          };

          // Static Public Variables
          // None

          // Static Public Functions
          // None

          // Prototype creation
          var child = RunningRequestsTracker;
          var proto = child.prototype;

          // Static Private Variables
          // None

          // Static Private Functions
          // None

          // Public Prototype Methods
          proto.addRequest = function (request) {
              this._runningRequests.push(request);
          };

          proto.removeRequest = function (request) {
              var index = this._runningRequests.indexOf(request);
              if (index > -1) {
                  this._runningRequests.splice(index, 1);
              }
          };

          proto.abortAllRunningRequests = function () {
              // Abort event handlers seem to run synchronously
              // So run on a copy to prevent mutating while aborting
              var runningRequestsCopy = this._runningRequests.slice();
              runningRequestsCopy.forEach(function (request) {
                  request.abort();
              });
          };
      }());

      var HttpClient;
      (function () {
          // Static private reference aliases
          // None

          // Constructor Function
          HttpClient = function (username, password, requestTracker, xmlHttpRequestImplementation) {
              // Public Instance Properties
              // None

              // Private Instance Properties
              this._username = username;
              this._password = password;
              this._headers = new Map();
              this._includeCredentialsDuringCORS = false;
              this._requestTracker = requestTracker;
              this._xmlHttpRequestImplementation = xmlHttpRequestImplementation;
          };

          // Static Public Variables
          // None

          // Static Public Functions
          // None

          // Prototype creation
          var child = HttpClient;
          var proto = child.prototype;

          // Static Private Variables
          // None

          // Static Private Functions
          // None

          // Public Prototype Methods
          proto.addHeader = function (header, value) {
              this._headers.set(header, value);
          };

          proto.removeHeader = function (header) {
              this._headers.delete(header);
          };

          // Returns the header with whitespace trimmed if found or undefined if not found
          proto.getHeaderValue = function (header) {
              var ret;

              if (this._headers.has(header)) {
                  ret = this._headers.get(header).trim();
              }

              return ret;
          };

          proto.listHeaders = function () {
              var outputHeaders = [];

              this._headers.forEach(function (value, header) {
                  outputHeaders.push(header.trim() + ': ' + value.trim());
              });

              // Avoid a trailing \r\n append
              return outputHeaders.join('\r\n');
          };

          proto.createRequest = function (requestData, cb) {
              var that = this;
              var XMLHttpRequestImplementation = that._xmlHttpRequestImplementation;
              var errorMessage;
              var emptyBody = new Uint8Array(0);
              var request = new XMLHttpRequestImplementation();

              // Save a reference to the request
              that._requestTracker.addRequest(request);

              // Create event listeners
              var eventListeners = {};

              // Even though we are rigorous with removing event listeners there is at least one case where completeRequest will be run twice
              // In legacy browsers if a bad url is provided the send() function will throw an error triggering a catch statement in addition to the error event handler
              // However, only in legacy browsers will the error event handler run before the catch statement
              // So while most browsers will completeRequest in the catch statement and remove the event handlers to prevent further triggers,
              // legacy browsers will run the error event handler first to completeRequest and then attempt to completeRequest again in the catch statement
              // So begrudgingly a requestCompleted flag is added to prevent multiple calls of completeRequest.
              // This flag is no longer required.
              var requestCompleted = false;

              var completeRequest = function (responseData) {
                  // Make sure completeRequest is not called twice
                  if (requestCompleted === true) {
                      return;
                  }
                  requestCompleted = true;

                  // Unregister event listeners
                  Object.keys(eventListeners).forEach(function (eventName) {
                      request.removeEventListener(eventName, eventListeners[eventName]);
                  });

                  // Remove reference to complete request
                  that._requestTracker.removeRequest(request);

                  cb(responseData);
              };

              // load, error, timeout, and abort are mutually exclusive and one will fire after send
              // See https://xhr.spec.whatwg.org/#suggested-names-for-events-using-the-progressevent-interface
              eventListeners.load = function () {
                  // A status code of 0 is an invalid status code and indicative of a failure
                  // So far only legacy browsers return a status codes of 0, so this check is no longer needed.
                  if (request.status === 0) {
                      completeRequest({
                          header: '',
                          body: emptyBody,
                          status: 0,
                          labviewCode: ERRORS.kNIHttpResultInternalUndefinedError.CODE,
                          errorMessage: ERRORS.kNIHttpResultInternalUndefinedError.MESSAGE,
                          requestException: undefined
                      });
                      return;
                  }

                  // TODO mraj is there a way to get the HTTP version from the request?
                  var httpVersion = 'HTTP/1.1';
                  var statusLine = httpVersion + ' ' + request.status + ' ' + request.statusText + '\r\n';
                  var allResponseHeaders = request.getAllResponseHeaders();

                  var header = statusLine + allResponseHeaders;
                  var body = new Uint8Array(request.response);
                  completeRequest({
                      header: header,
                      body: body,
                      status: request.status,
                      labviewCode: ERRORS.NO_ERROR.CODE,
                      errorMessage: ERRORS.NO_ERROR.MESSAGE,
                      requestException: undefined
                  });
              };

              eventListeners.error = function () {
                  completeRequest({
                      header: '',
                      body: emptyBody,
                      status: 0,
                      labviewCode: ERRORS.kNIHttpWebVINetworkError.CODE,
                      errorMessage: ERRORS.kNIHttpWebVINetworkError.MESSAGE,
                      requestException: undefined
                  });
              };

              // Desktop does not try and return partial response data in timeout scenarios so do not attempt to here
              eventListeners.timeout = function () {
                  completeRequest({
                      header: '',
                      body: emptyBody,
                      status: 0,
                      labviewCode: ERRORS.ncTimeOutErr.CODE,
                      errorMessage: ERRORS.ncTimeOutErr.MESSAGE,
                      requestException: undefined
                  });
              };

              eventListeners.abort = function () {
                  completeRequest({
                      header: '',
                      body: emptyBody,
                      status: 0,
                      labviewCode: ERRORS.kNIHttpResultAbortedByCallback.CODE,
                      errorMessage: ERRORS.kNIHttpResultAbortedByCallback.MESSAGE,
                      requestException: undefined
                  });
              };

              // Register event listeners
              Object.keys(eventListeners).forEach(function (eventName) {
                  request.addEventListener(eventName, eventListeners[eventName]);
              });

              // Open request to set properties
              try {
                  request.open(requestData.method, requestData.url, true, that._username, that._password);
              } catch (ex) {
                  // Spec says open should throw SyntaxError but some browsers seem to throw DOMException.
                  // Instead of trying to detect, always say invalid url and add message to source
                  completeRequest({
                      header: '',
                      body: emptyBody,
                      status: 0,
                      labviewCode: ERRORS.kNIHttpResultCouldNotConnect.CODE,
                      errorMessage: ERRORS.kNIHttpResultCouldNotConnect.MESSAGE,
                      requestException: ex
                  });
                  return;
              }

              // Add request headers
              var currentHeaderName, currentHeaderValue;
              var hasContentType = false;

              try {
                  that._headers.forEach(function (value, header) {
                      currentHeaderName = header;
                      currentHeaderValue = value;

                      request.setRequestHeader(header, value);

                      if (header.toLowerCase() === 'content-type') {
                          hasContentType = true;
                      }
                  });
              } catch (ex) {
                  errorMessage = ERRORS.kNIHttpWebVIHeaderInvalid.MESSAGE + '\nheader:' + currentHeaderName + '\nvalue:' + currentHeaderValue;
                  completeRequest({
                      header: '',
                      body: emptyBody,
                      status: 0,
                      labviewCode: ERRORS.kNIHttpWebVIHeaderInvalid.CODE,
                      errorMessage: errorMessage,
                      requestException: ex
                  });
                  return;
              }

              // Set the Content-Type to application/x-www-form-urlencoded to match the default on Desktop
              // User can add a Content-Type header to override this default
              // Only add the default Content-Type header to requests that include a buffer
              if (hasContentType === false && requestData.buffer !== undefined) {
                  request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
              }

              // withCredentials allows cookies (to be sent / set), HTTP Auth, and TLS Client certs when sending requests Cross Origin
              // See https://w3c.github.io/webappsec-cors-for-developers/#anonymous-requests-or-access-control-allow-origin
              request.withCredentials = that._includeCredentialsDuringCORS;

              // Receive the response as an ArrayBuffer. Relies on the server to send data as UTF-8 encoded text for text transmission.
              request.responseType = 'arraybuffer';

              // In legacy browsers timeout property may only be set after calling open and before calling send, no longer required
              request.timeout = requestData.xhrTimeout;

              // Send request
              // Legacy browsers throw on send() if an invalid url is provided. Spec compliant browsers throw on open() for invalid urls.
              // Not sure if this is the only reason for send to throw, so using more generic network error
              // The exception handling is likely no longer required.
              try {
                  if (requestData.buffer === undefined) {
                      request.send();
                  } else {
                      request.send(requestData.buffer);
                  }
              } catch (ex) {
                  completeRequest({
                      header: '',
                      body: emptyBody,
                      status: 0,
                      labviewCode: ERRORS.kNIHttpWebVINetworkError.CODE,
                      errorMessage: ERRORS.kNIHttpWebVINetworkError.MESSAGE,
                      requestException: ex
                  });
                  return;
              }
          };

          proto.setIncludeCredentialsDuringCORS = function (includeCredentialsDuringCORS) {
              this._includeCredentialsDuringCORS = includeCredentialsDuringCORS;
          };
      }());

      var HttpClientManager;
      (function () {
          // Static private reference aliases
          // None

          // Constructor Function
          HttpClientManager = function () {
              // Public Instance Properties
              // None

              // Private Instance Properties
              this._httpClients = new Map();
              this._runningRequestsTracker = new RunningRequestsTracker();

              if (typeof XMLHttpRequest === 'undefined') {
                  this._xmlHttpRequestImplementation = function () {
                      throw new Error('Vireo could not find a global implementation of XMLHttpRequest Level 2. Please provide one to vireo.httpClient.setXMLHttpRequestImplementation to use the Vireo HTTP Client');
                  };
              } else {
                  this._xmlHttpRequestImplementation = XMLHttpRequest;
              }
          };

          // Static Public Variables
          // None

          // Static Public Functions
          // None

          // Prototype creation
          var child = HttpClientManager;
          var proto = child.prototype;

          // Static Private Variables
          // None

          // Static Private Functions
          var createHandle = (function () {
              // A handle of zero implies an invalid handle
              var currentHandle = 1;

              return function () {
                  var handle = currentHandle;
                  currentHandle += 1;
                  return handle;
              };
          }());

          // Public Prototype Methods
          proto.create = function (username, password) {
              var httpClient = new HttpClient(username, password, this._runningRequestsTracker, this._xmlHttpRequestImplementation);
              var handle = createHandle();

              this._httpClients.set(handle, httpClient);
              return handle;
          };

          proto.createHttpClientWithoutHandle = function (username, password) {
              var httpClient = new HttpClient(username, password, this._runningRequestsTracker, this._xmlHttpRequestImplementation);
              return httpClient;
          };

          proto.destroy = function (handle) {
              var httpClient = this._httpClients.get(handle);
              if (httpClient === undefined) {
                  return;
              }

              // Currently we do not abort any existing requests that were made with this handle
              this._httpClients.delete(handle);
          };

          proto.get = function (handle) {
              return this._httpClients.get(handle);
          };

          proto.abortAllRunningRequests = function () {
              this._runningRequestsTracker.abortAllRunningRequests();
          };

          proto.setXMLHttpRequestImplementation = function (fn) {
              if (typeof fn !== 'function') {
                  throw new Error('A valid function must be provided');
              }

              // This does not have an effect on already instanced HttpClients or running requests, only on new HttpClient instances
              this._xmlHttpRequestImplementation = fn;
          };
      }());

      // Vireo Core Mixin Function
      assignHttpClient = function (Module, publicAPI) {
          Module.httpClient = {};
          publicAPI.httpClient = {};

          // Private Instance Variables (per vireo instance)
          var httpClientManager = new HttpClientManager();

          var METHOD_NAMES = ['GET', 'HEAD', 'PUT', 'POST', 'DELETE'];

          var findhttpClientOrWriteError = function (handle, errorValueRef) {
              var httpClient = httpClientManager.get(handle);
              var newError;

              if (httpClient === undefined) {
                  newError = {
                      status: true,
                      code: ERRORS.mgArgErr.CODE,
                      source: Module.coreHelpers.createSourceFromMessage(ERRORS.mgArgErr.MESSAGE)
                  };

                  Module.coreHelpers.mergeErrors(errorValueRef, newError);
              }

              return httpClient;
          };

          // Exported functions
          publicAPI.httpClient.abortAllRunningRequests = function () {
              httpClientManager.abortAllRunningRequests();
          };

          publicAPI.httpClient.setXMLHttpRequestImplementation = function (fn) {
              httpClientManager.setXMLHttpRequestImplementation(fn);
          };

          // Make httpClientManager available as a private API
          // These are internal APIs subject to change: USE AT YOUR OWN RISK
          Module.httpClient.httpClientManager = httpClientManager;

          // NOTE: All of the Module.js* functions  in this file should be called from Vireo only if there is not an existing error
          // unless otherwise stated in the function below
          Module.httpClient.jsHttpClientOpen = function (
              cookieFileTypeRef, cookieFileDataRef,
              usernameTypeRef, usernameDataRef,
              passwordTypeRef, passwordDataRef,
              verifyServerTypeRef, verifyServerDataRef,
              handleTypeRef, handleDataRef,
              errorTypeRef, errorDataRef) {
              var cookieFileValueRef = Module.eggShell.createValueRef(cookieFileTypeRef, cookieFileDataRef);
              var usernameValueRef = Module.eggShell.createValueRef(usernameTypeRef, usernameDataRef);
              var passwordValueRef = Module.eggShell.createValueRef(passwordTypeRef, passwordDataRef);
              var verifyServerValueRef = Module.eggShell.createValueRef(verifyServerTypeRef, verifyServerDataRef);
              var handleValueRef = Module.eggShell.createValueRef(handleTypeRef, handleDataRef);
              var errorValueRef = Module.eggShell.createValueRef(errorTypeRef, errorDataRef);

              var setDefaultOutputs = function () {
                  Module.eggShell.writeDouble(handleValueRef, DEFAULT_INVALID_HANDLE);
              };

              var newError;
              var cookieFile = Module.eggShell.readString(cookieFileValueRef);
              if (cookieFile !== '') {
                  newError = {
                      status: true,
                      code: ERRORS.kNIHttpWebVICookieFileUnsupported.CODE,
                      source: Module.coreHelpers.createSourceFromMessage(ERRORS.kNIHttpWebVICookieFileUnsupported.MESSAGE)
                  };

                  Module.coreHelpers.mergeErrors(errorValueRef, newError);
                  setDefaultOutputs();
                  return;
              }

              var verifyServer = Module.eggShell.readDouble(verifyServerValueRef) !== FALSE;
              if (verifyServer !== true) {
                  newError = {
                      status: true,
                      code: ERRORS.kNIHttpWebVIVerifyServerUnsupported.CODE,
                      source: Module.coreHelpers.createSourceFromMessage(ERRORS.kNIHttpWebVIVerifyServerUnsupported.MESSAGE)
                  };

                  Module.coreHelpers.mergeErrors(errorValueRef, newError);
                  setDefaultOutputs();
                  return;
              }

              var username = Module.eggShell.readString(usernameValueRef);
              var password = Module.eggShell.readString(passwordValueRef);
              var newHandle = httpClientManager.create(username, password);
              Module.eggShell.writeDouble(handleValueRef, newHandle);
          };

          Module.httpClient.jsHttpClientClose = function (
              handleTypeRef, handleDataRef,
              errorTypeRef, errorDataRef) {
              // This function should be called irregardless of an existing error to clean-up resources
              var newError;
              var handleValueRef = Module.eggShell.createValueRef(handleTypeRef, handleDataRef);
              var errorValueRef = Module.eggShell.createValueRef(errorTypeRef, errorDataRef);
              var handle = Module.eggShell.readDouble(handleValueRef);
              var handleExists = httpClientManager.get(handle) !== undefined;

              if (handleExists === false) {
                  newError = {
                      status: true,
                      code: ERRORS.InvalidRefnum.CODE,
                      source: Module.coreHelpers.createSourceFromMessage(ERRORS.InvalidRefnum.MESSAGE)
                  };

                  Module.coreHelpers.mergeErrors(errorValueRef, newError);
                  // Do not return if an error is written, need to still destroy any existing handles
              }

              // Always destroy the handle
              httpClientManager.destroy(handle);
          };

          Module.httpClient.jsHttpClientAddHeader = function (
              handleTypeRef, handleDataRef,
              headerTypeRef, headerDataRef,
              valueTypeRef, valueDataRef,
              errorTypeRef, errorDataRef) {
              var handleValueRef = Module.eggShell.createValueRef(handleTypeRef, handleDataRef);
              var headerValueRef = Module.eggShell.createValueRef(headerTypeRef, headerDataRef);
              var valueValueRef = Module.eggShell.createValueRef(valueTypeRef, valueDataRef);
              var errorValueRef = Module.eggShell.createValueRef(errorTypeRef, errorDataRef);

              var handle = Module.eggShell.readDouble(handleValueRef);
              var httpClient = findhttpClientOrWriteError(handle, errorValueRef);
              if (httpClient === undefined) {
                  return;
              }

              var header = Module.eggShell.readString(headerValueRef);
              var value = Module.eggShell.readString(valueValueRef);
              httpClient.addHeader(header, value);
          };

          Module.httpClient.jsHttpClientRemoveHeader = function (
              handleTypeRef, handleDataRef,
              headerTypeRef, headerDataRef,
              errorTypeRef, errorDataRef) {
              var handleValueRef = Module.eggShell.createValueRef(handleTypeRef, handleDataRef);
              var headerValueRef = Module.eggShell.createValueRef(headerTypeRef, headerDataRef);
              var errorValueRef = Module.eggShell.createValueRef(errorTypeRef, errorDataRef);
              var handle = Module.eggShell.readDouble(handleValueRef);
              var httpClient = findhttpClientOrWriteError(handle, errorValueRef);
              if (httpClient === undefined) {
                  return;
              }

              var header = Module.eggShell.readString(headerValueRef);
              httpClient.removeHeader(header);
          };

          Module.httpClient.jsHttpClientGetHeader = function (
              handleTypeRef, handleDataRef,
              headerTypeRef, headerDataRef,
              valueTypeRef, valueDataRef,
              errorTypeRef, errorDataRef) {
              var handleValueRef = Module.eggShell.createValueRef(handleTypeRef, handleDataRef);
              var headerValueRef = Module.eggShell.createValueRef(headerTypeRef, headerDataRef);
              var valueValueRef = Module.eggShell.createValueRef(valueTypeRef, valueDataRef);
              var errorValueRef = Module.eggShell.createValueRef(errorTypeRef, errorDataRef);
              var setDefaultOutputs = function () {
                  Module.eggShell.writeString(valueValueRef, '');
              };
              var handle = Module.eggShell.readDouble(handleValueRef);
              var httpClient = findhttpClientOrWriteError(handle, errorValueRef);
              if (httpClient === undefined) {
                  setDefaultOutputs();
                  return;
              }

              var newError;
              var header = Module.eggShell.readString(headerValueRef);
              var value = httpClient.getHeaderValue(header);
              if (value === undefined) {
                  newError = {
                      status: true,
                      code: ERRORS.kNIHttpResultRequestHeaderDoesNotExist.CODE,
                      source: Module.coreHelpers.createSourceFromMessage(ERRORS.kNIHttpResultRequestHeaderDoesNotExist.MESSAGE + '\nheader:' + header)
                  };

                  Module.coreHelpers.mergeErrors(errorValueRef, newError);
                  setDefaultOutputs();
                  return;
              }

              Module.eggShell.writeString(valueValueRef, value);
          };

          Module.httpClient.jsHttpClientHeaderExists = function (
              handleTypeRef, handleDataRef,
              headerTypeRef, headerDataRef,
              headerExistsTypeRef, headerExistsDataRef,
              valueTypeRef, valueDataRef,
              errorTypeRef, errorDataRef) {
              var handleValueRef = Module.eggShell.createValueRef(handleTypeRef, handleDataRef);
              var headerValueRef = Module.eggShell.createValueRef(headerTypeRef, headerDataRef);
              var headerExistsValueRef = Module.eggShell.createValueRef(headerExistsTypeRef, headerExistsDataRef);
              var valueValueRef = Module.eggShell.createValueRef(valueTypeRef, valueDataRef);
              var errorValueRef = Module.eggShell.createValueRef(errorTypeRef, errorDataRef);
              var setDefaultOutputs = function () {
                  Module.eggShell.writeDouble(headerExistsValueRef, FALSE);
                  Module.eggShell.writeString(valueValueRef, '');
              };
              var handle = Module.eggShell.readDouble(handleValueRef);
              var httpClient = findhttpClientOrWriteError(handle, errorValueRef);
              if (httpClient === undefined) {
                  setDefaultOutputs();
                  return;
              }

              var header = Module.eggShell.readString(headerValueRef);
              var valueOrUndefined = httpClient.getHeaderValue(header);
              var headerExists = valueOrUndefined !== undefined;
              if (headerExists === false) {
                  setDefaultOutputs();
                  return;
              }

              Module.eggShell.writeDouble(headerExistsValueRef, TRUE);
              Module.eggShell.writeString(valueValueRef, valueOrUndefined);
          };

          Module.httpClient.jsHttpClientListHeaders = function (
              handleTypeRef, handleDataRef,
              headerListTypeRef, headerListDataRef,
              errorTypeRef, errorDataRef) {
              var handleValueRef = Module.eggShell.createValueRef(handleTypeRef, handleDataRef);
              var headerListValueRef = Module.eggShell.createValueRef(headerListTypeRef, headerListDataRef);
              var errorValueRef = Module.eggShell.createValueRef(errorTypeRef, errorDataRef);
              var setDefaultOutputs = function () {
                  Module.eggShell.writeString(headerListValueRef, '');
              };
              var handle = Module.eggShell.readDouble(handleValueRef);
              var httpClient = findhttpClientOrWriteError(handle, errorValueRef);
              if (httpClient === undefined) {
                  setDefaultOutputs();
                  return;
              }

              var list = httpClient.listHeaders();
              Module.eggShell.writeString(headerListValueRef, list);
          };

          Module.httpClient.jsHttpClientMethod = function (
              methodId,
              handleTypeRef, handleDataRef,
              urlTypeRef, urlDataRef,
              outputFilePathTypeRef, outputFilePathDataRef,
              bufferTypeRef, bufferDataRef,
              timeoutTypeRef, timeoutDataRef,
              headersTypeRef, headersDataRef,
              bodyTypeRef, bodyDataRef,
              statusCodeTypeRef, statusCodeDataRef,
              errorTypeRef, errorDataRef,
              occurrencePointer) {
              var handleValueRef = Module.eggShell.createValueRef(handleTypeRef, handleDataRef);
              var urlValueRef = Module.eggShell.createValueRef(urlTypeRef, urlDataRef);
              var outputFilePathValueRef = Module.eggShell.createValueRef(outputFilePathTypeRef, outputFilePathDataRef);
              var timeoutValueRef = Module.eggShell.createValueRef(timeoutTypeRef, timeoutDataRef);
              var headersValueRef = Module.eggShell.createValueRef(headersTypeRef, headersDataRef);
              var bodyValueRef = Module.eggShell.createValueRef(bodyTypeRef, bodyDataRef);
              var statusCodeValueRef = Module.eggShell.createValueRef(statusCodeTypeRef, statusCodeDataRef);
              var errorValueRef = Module.eggShell.createValueRef(errorTypeRef, errorDataRef);
              var handle = Module.eggShell.readDouble(handleValueRef);
              var setDefaultOutputs = function () {
                  Module.eggShell.writeString(headersValueRef, '');
                  Module.eggShell.writeDouble(statusCodeValueRef, 0);

                  if (bodyValueRef !== undefined) {
                      Module.eggShell.writeString(bodyValueRef, '');
                  }

                  Module.eggShell.setOccurrenceAsync(occurrencePointer);
              };

              var newError;
              var method = METHOD_NAMES[methodId];

              // Nullable input parameters: handle, outputFile, buffer
              // Nullable output parameter: body

              var outputFile;
              if (outputFilePathValueRef !== undefined) {
                  outputFile = Module.eggShell.readString(outputFilePathValueRef);

                  if (outputFile !== '') {
                      newError = {
                          status: true,
                          code: ERRORS.kNIHttpWebVIOutputFileUnsupported.CODE,
                          source: Module.coreHelpers.createSourceFromMessage(ERRORS.kNIHttpWebVIOutputFileUnsupported.MESSAGE)
                      };

                      Module.coreHelpers.mergeErrors(errorValueRef, newError);
                      setDefaultOutputs();
                      return;
                  }
              }

              var valueRef, buffer, typedArrayBuffer;
              if (bufferDataRef !== NULL) {
                  valueRef = Module.eggShell.createValueRef(bufferTypeRef, bufferDataRef);
                  typedArrayBuffer = Module.eggShell.readTypedArray(valueRef);

                  // Blob API does not exist in node.js
                  if (typeof Blob === 'undefined') {
                      buffer = typedArrayBuffer;
                  } else {
                      // TODO(mraj) would like to use the typed array in all browsers but not supported in iOS with XHR.send
                      // Blob type property not set to determine Content-Type for XHR as Edge seem to ignore it.
                      buffer = new Blob([typedArrayBuffer]);
                  }
              }

              var httpClient;
              if (handle === NULL) {
                  httpClient = httpClientManager.createHttpClientWithoutHandle('', '');
              } else {
                  httpClient = findhttpClientOrWriteError(handle, errorValueRef);
                  if (httpClient === undefined) {
                      setDefaultOutputs();
                      return;
                  }
              }

              var xhrTimeout;
              var timeout;

              if (timeoutValueRef === undefined) {
                  xhrTimeout = DEFAULT_TIMEOUT_MS;
              } else {
                  timeout = Module.eggShell.readDouble(timeoutValueRef);

                  // In LabVIEW timeout -1 means wait forever, in xhr timeout 0 means wait forever
                  if (timeout < 0) {
                      xhrTimeout = 0;
                  } else if (timeout === 0) {
                      xhrTimeout = TIMEOUT_IMMEDIATELY_MS;
                  } else {
                      xhrTimeout = timeout;
                  }
              }

              var url = Module.eggShell.readString(urlValueRef);
              var requestData = {
                  method: method,
                  url: url,
                  xhrTimeout: xhrTimeout,
                  buffer: buffer
              };

              httpClient.createRequest(requestData, function (responseData) {
                  Module.eggShell.writeString(headersValueRef, responseData.header);
                  Module.eggShell.writeDouble(statusCodeValueRef, responseData.status);

                  if (bodyValueRef !== undefined) {
                      Module.eggShell.resizeArray(bodyValueRef, [responseData.body.length]);
                      Module.eggShell.writeTypedArray(bodyValueRef, responseData.body);
                  }

                  var errorMessage = Module.coreHelpers.formatMessageWithException(responseData.errorMessage, responseData.requestException);
                  var newError = {
                      status: responseData.labviewCode !== ERRORS.NO_ERROR.CODE,
                      code: responseData.labviewCode,
                      source: Module.coreHelpers.createSourceFromMessage(errorMessage)
                  };

                  Module.coreHelpers.mergeErrors(errorValueRef, newError);
                  Module.eggShell.setOccurrenceAsync(occurrencePointer);
              });
          };

          Module.httpClient.jsHttpClientConfigCORS = function (
              handleTypeRef, handleDataRef,
              includeCredentialsDuringCORSTypeRef, includeCredentialsDuringCORSDataRef,
              errorTypeRef, errorDataRef) {
              var handleValueRef = Module.eggShell.createValueRef(handleTypeRef, handleDataRef);
              var includeCredentialsDuringCORSValueRef = Module.eggShell.createValueRef(includeCredentialsDuringCORSTypeRef, includeCredentialsDuringCORSDataRef);
              var errorValueRef = Module.eggShell.createValueRef(errorTypeRef, errorDataRef);
              var handle = Module.eggShell.readDouble(handleValueRef);
              var includeCredentialsDuringCORS = Module.eggShell.readDouble(includeCredentialsDuringCORSValueRef) !== FALSE;
              var httpClient = findhttpClientOrWriteError(handle, errorValueRef);
              if (httpClient === undefined) {
                  return;
              }
              httpClient.setIncludeCredentialsDuringCORS(includeCredentialsDuringCORS);
          };
      };
  }());
  var assignHttpClient$1 = assignHttpClient;

  // Copyright (c) 2020 National Instruments
  // SPDX-License-Identifier: MIT

  var assignJavaScriptInvoke;
  (function () {
      // Static Private Variables (all vireo instances)
      var ERRORS = {
          // Shared
          NO_ERROR: {
              CODE: 0,
              MESSAGE: ''
          },

          kNIUnableToInvokeAJavaScriptFunction: {
              CODE: 44300,
              MESSAGE: 'An exception occurred within the external JavaScript function called by a JavaScript Library Interface node. Verify your JavaScript code is valid.'
          },

          kNIUnsupportedParameterTypeInJavaScriptInvoke: undefined, // Code 44301 no longer used. Unsupported LabVIEW parameter types now result in runtime exception.

          kNIUnableToFindFunctionForJavaScriptInvoke: {
              CODE: 44302,
              MESSAGE: 'Function not found. Verify the function name in the external JavaScript file matches the function name in the JavaScript Library Interface.'
          },

          kNIUnableToSetReturnValueInJavaScriptInvoke: {
              CODE: 44303,
              MESSAGE: 'Unable to set return value for JavaScript Library Interface node parameter.'
          },

          kNIUnsupportedLabVIEWReturnTypeInJavaScriptInvoke: undefined, // Code 44305 no longer used. Unsupported LabVIEW return types now result in runtime exception.

          kNITypeMismatchForReturnTypeInJavaScriptInvoke: {
              CODE: 44306,
              MESSAGE: 'Return type mismatch. Verify the return type in the JavaScript Library Interface matches the return type in the external JavaScript function.'
          },

          kNIUnableToHandlePromise: {
              CODE: 44307,
              MESSAGE: 'Unable to use Promise. Verify that the getCompletionCallback API function is not used in the external JavaScript function with a Promise return value.'
          },

          kNIUnableToAcceptReturnValueDuringAsync: {
              CODE: 44308,
              MESSAGE: 'Unable to set return value after call to getCompletionCallback API function. Verify return value is provided to the completion callback and not returned.'
          },

          kNIInvalidReference: {
              CODE: 1556,
              MESSAGE: 'The reference is invalid. This error might occur because the reference has been deleted.'
          }
      };

      // Vireo Core Mixin Function
      assignJavaScriptInvoke = function (Module, publicAPI) {
          Module.javaScriptInvoke = {};
          publicAPI.javaScriptInvoke = {};

          // Private Instance Variables (per vireo instance)
          // Every call to mergeNewError should be preceeded by the behavior for internalFunctions
          var mergeNewError = function (errorValueRef, functionName, errorToSet, exception) {
              var newError = {
                  status: true,
                  code: undefined,
                  source: undefined
              };
              var messageWithException = Module.coreHelpers.formatMessageWithException(errorToSet.MESSAGE + '\nfunction: ' + functionName, exception);
              newError.source = Module.coreHelpers.createSourceFromMessage(messageWithException);
              newError.code = errorToSet.CODE;
              Module.coreHelpers.mergeErrors(errorValueRef, newError);
          };

          var createValueRefFromPointerArray = function (pointerArray, index) {
              var typeRef = Module._JavaScriptInvoke_GetParameterTypeRef(pointerArray, index);
              var dataRef = Module._JavaScriptInvoke_GetParameterDataRef(pointerArray, index);
              var returnValueRef = Module.eggShell.createValueRef(typeRef, dataRef);
              return returnValueRef;
          };

          var generateUniqueRefNumCookie = (function () {
              var jsRefNumCookieCounter = 0;
              return function () {
                  jsRefNumCookieCounter += 1;
                  return jsRefNumCookieCounter;
              };
          }());

          class StaticRefnumManager {
              constructor () {
                  this._cookieToJsValueMap = new Map();
                  this._jsValueToCookieCache = new Map();
              }

              createCookie (jsValue) {
                  // assume static references are never undefined or null
                  if (jsValue === undefined || jsValue === null) {
                      throw new Error('Attempted to set a static JavaScript Refnum to undefined or null. This is not a valid operation.');
                  }
                  var existingCookie = this._jsValueToCookieCache.get(jsValue);
                  if (existingCookie !== undefined) {
                      return existingCookie;
                  }
                  var cookie = generateUniqueRefNumCookie();
                  this._cookieToJsValueMap.set(cookie, jsValue);
                  this._jsValueToCookieCache.set(jsValue, cookie);
                  return cookie;
              }

              lookupValue (cookie) {
                  var jsValue = this._cookieToJsValueMap.get(cookie);
                  if (jsValue === undefined) {
                      throw new Error('Attempted to get a Static JavaScript Refnum with a cookie that has not been set.');
                  }
                  return jsValue;
              }

              isCookieValid (cookie) {
                  return this._cookieToJsValueMap.has(cookie);
              }

              get size () {
                  return this._cookieToJsValueMap.size;
              }
          }

          class DynamicRefnumManager {
              constructor () {
                  this._cookieToJsValueMap = new Map();
              }

              createCookie (jsValue) {
                  // Any value allowed and always creates a new cookie
                  var cookie = generateUniqueRefNumCookie();
                  this._cookieToJsValueMap.set(cookie, jsValue);
                  return cookie;
              }

              createCookies (values, cookies) {
                  var i, cookie;
                  for (i = 0; i < values.length; i += 1) {
                      cookie = generateUniqueRefNumCookie();
                      this._cookieToJsValueMap.set(cookie, values[i]);
                      cookies[i] = cookie;
                  }
              }

              lookupValue (cookie) {
                  // Have to check the map because undefined and null are possible values for dynamic references
                  if (!this._cookieToJsValueMap.has(cookie)) {
                      throw new Error('Attempted to get a Dynamic JavaScript Refnum with a cookie that has not been set.');
                  }
                  var jsValue = this._cookieToJsValueMap.get(cookie);
                  return jsValue;
              }

              lookupValues (cookies, values) {
                  var i;
                  for (i = 0; i < cookies.length; i += 1) {
                      if (this._cookieToJsValueMap.has(cookies[i])) {
                          values[i] = this._cookieToJsValueMap.get(cookies[i]);
                      } else {
                          return false;
                      }
                  }
                  return true;
              }

              isCookieValid (cookie) {
                  return this._cookieToJsValueMap.has(cookie);
              }

              deleteCookie (cookie) {
                  return this._cookieToJsValueMap.delete(cookie);
              }

              get size () {
                  return this._cookieToJsValueMap.size;
              }
          }

          var staticRefnumManager = new StaticRefnumManager();
          var dynamicRefnumManager = new DynamicRefnumManager();

          Module.javaScriptInvoke.do_not_use_debug_only_static_refnum_manager = staticRefnumManager;
          Module.javaScriptInvoke.do_not_use_debug_only_dynamic_refnum_manager = dynamicRefnumManager;

          Module.javaScriptInvoke.readJavaScriptRefNum = function (javaScriptValueRef) {
              var cookie = Module.eggShell.readDouble(javaScriptValueRef);
              var isStaticReference = Module.typeHelpers.isJSObjectStaticRefnum(javaScriptValueRef.typeRef);
              if (isStaticReference) {
                  return staticRefnumManager.lookupValue(cookie);
              }

              return dynamicRefnumManager.lookupValue(cookie);
          };

          /**
           * Write JS value to a JS reference local
           * @param javaScriptValueRef VIA local for this JS reference
           * @param jsValue the JS value to associate with an existing or new cookie
           * Static reference (Static control reference) shares cookie for the same jsValue.
           * Dynamic reference (JS opaque reference from JSLI) always creates a new cookie even for the same jsValue.
           */
          Module.javaScriptInvoke.writeJavaScriptRefNum = function (javaScriptValueRef, jsValue) {
              var isStaticReference = Module.typeHelpers.isJSObjectStaticRefnum(javaScriptValueRef.typeRef);
              var cookie;
              if (isStaticReference) {
                  cookie = staticRefnumManager.createCookie(jsValue);
                  Module.eggShell.writeDouble(javaScriptValueRef, cookie);
                  return;
              }

              cookie = dynamicRefnumManager.createCookie(jsValue);
              Module.eggShell.writeDouble(javaScriptValueRef, cookie);
          };

          Module.javaScriptInvoke.isJavaScriptRefNumValid = function (javaScriptValueRef) {
              var cookie = Module.eggShell.readDouble(javaScriptValueRef);
              var isStaticReference = Module.typeHelpers.isJSObjectStaticRefnum(javaScriptValueRef.typeRef);
              if (isStaticReference) {
                  return staticRefnumManager.isCookieValid(cookie);
              }
              return dynamicRefnumManager.isCookieValid(cookie);
          };

          // static reference (static control reference) always returns true (the operation was successful, which for static references is a no-op)
          // dynamic reference (JS opaque reference from JSLI) returns true if the reference was found + cleared and false if the reference was invalid
          Module.javaScriptInvoke.clearJavaScriptRefNum = function (javaScriptValueRef) {
              var isStaticReference = Module.typeHelpers.isJSObjectStaticRefnum(javaScriptValueRef.typeRef);
              if (isStaticReference) {
                  // Static references are never closed so do not remove from map
                  return true;
              }
              var cookie = Module.eggShell.readDouble(javaScriptValueRef);
              return dynamicRefnumManager.deleteCookie(cookie);
          };

          var createJavaScriptInvokeParameterValueVisitor = function () {
              var reportInvalidReference = function (data) {
                  data.errorOccurred = true;
                  // Internal check not needed because peeker is not used for internal calls
                  mergeNewError(data.errorValueRef, data.functionName, ERRORS.kNIInvalidReference);
              };

              var visitNumeric = function (valueRef) {
                  return Module.eggShell.readDouble(valueRef);
              };
              return {
                  visitInt8: visitNumeric,
                  visitInt16: visitNumeric,
                  visitInt32: visitNumeric,
                  visitUInt8: visitNumeric,
                  visitUInt16: visitNumeric,
                  visitUInt32: visitNumeric,
                  visitSingle: visitNumeric,
                  visitDouble: visitNumeric,
                  visitBoolean: function (valueRef) {
                      return Module.eggShell.readDouble(valueRef) !== 0;
                  },

                  visitString: function (valueRef) {
                      return Module.eggShell.readString(valueRef);
                  },

                  visitArray: function (valueRef, data) {
                      var foundAllCookies, returnValue, cookies;
                      var subTypeRef = Module.typeHelpers.subElementByIndex(valueRef.typeRef, 0);
                      if (Module.typeHelpers.isJSObjectDynamicRefnum(subTypeRef)) {
                          cookies = Module.eggShell.readTypedArray(valueRef);
                          returnValue = [];
                          foundAllCookies = dynamicRefnumManager.lookupValues(cookies, returnValue);
                          if (!foundAllCookies) {
                              reportInvalidReference(data);
                              return undefined;
                          }
                          return returnValue;
                      }

                      // duplicate typedArray so user cannot accidentally manipulate vireo memory space directly
                      var typedArray = Module.eggShell.readTypedArray(valueRef);
                      var TypedArrayConstructor = typedArray.constructor;
                      var clonedArray = new TypedArrayConstructor(typedArray);
                      return clonedArray;
                  },

                  visitJSObjectRefnum: function (valueRef, data) {
                      var isJavaScriptRefNumValid = Module.javaScriptInvoke.isJavaScriptRefNumValid(valueRef);
                      if (!isJavaScriptRefNumValid) {
                          reportInvalidReference(data);
                          return undefined;
                      }
                      return Module.javaScriptInvoke.readJavaScriptRefNum(valueRef);
                  }
              };
          };

          var parameterValueVisitor = createJavaScriptInvokeParameterValueVisitor();

          var createJavaScriptInvokeReturnValueVisitor = function () {
              var reportReturnSetException = function (fn) {
                  return function (valueRef, data) {
                      try {
                          fn(valueRef, data);
                      } catch (ex) {
                          // Internal check not needed because poker is not used for internal calls
                          mergeNewError(data.errorValueRef, data.functionName, ERRORS.kNIUnableToSetReturnValueInJavaScriptInvoke, ex);
                      }
                  };
              };

              var reportTypeMismatch = function (data) {
                  // Internal check not needed because poker is not used for internal calls
                  mergeNewError(data.errorValueRef, data.functionName, ERRORS.kNITypeMismatchForReturnTypeInJavaScriptInvoke);
              };

              var visitNumeric = reportReturnSetException(function (valueRef, data) {
                  if (typeof data.returnValue !== 'number') {
                      reportTypeMismatch(data);
                      return;
                  }
                  Module.eggShell.writeDouble(valueRef, data.returnValue);
              });

              return {
                  visitInt8: visitNumeric,
                  visitInt16: visitNumeric,
                  visitInt32: visitNumeric,
                  visitUInt8: visitNumeric,
                  visitUInt16: visitNumeric,
                  visitUInt32: visitNumeric,
                  visitSingle: visitNumeric,
                  visitDouble: visitNumeric,
                  visitBoolean: reportReturnSetException(function (valueRef, data) {
                      if (typeof data.returnValue !== 'boolean') {
                          reportTypeMismatch(data);
                          return;
                      }
                      Module.eggShell.writeDouble(valueRef, data.returnValue ? 1 : 0);
                  }),

                  visitString: reportReturnSetException(function (valueRef, data) {
                      if (typeof data.returnValue !== 'string') {
                          reportTypeMismatch(data);
                          return;
                      }
                      Module.eggShell.writeString(valueRef, data.returnValue);
                  }),

                  visitArray: reportReturnSetException(function (valueRef, data) {
                      var cookies;
                      var subTypeRef = Module.typeHelpers.subElementByIndex(valueRef.typeRef, 0);
                      if (Module.typeHelpers.isJSObjectDynamicRefnum(subTypeRef)) {
                          if (Array.isArray(data.returnValue)) {
                              cookies = new Uint32Array(data.returnValue.length);
                              dynamicRefnumManager.createCookies(data.returnValue, cookies);
                              Module.eggShell.resizeArray(valueRef, [cookies.length]);
                              Module.eggShell.writeTypedArray(valueRef, cookies);
                              return;
                          }
                          // If not array falls through to report type mismatch
                      } else if (Module.eggShell.isSupportedAndCompatibleArrayType(valueRef, data.returnValue)) {
                          Module.eggShell.resizeArray(valueRef, [data.returnValue.length]);
                          Module.eggShell.writeTypedArray(valueRef, data.returnValue);
                          return;
                      }
                      reportTypeMismatch(data);
                      return;
                  }),

                  visitJSObjectRefnum: reportReturnSetException(function (valueRef, data) {
                      Module.javaScriptInvoke.writeJavaScriptRefNum(valueRef, data.returnValue);
                  })
              };
          };

          var returnValueVisitor = createJavaScriptInvokeReturnValueVisitor();

          var getGlobal = function () {
              // Normally we do not use typeof checks to see if a value is undefined
              // however in this case it is used to prevent ReferenceErrors when probing global objects
              if (typeof window !== 'undefined') {
                  return window;
              } else if (typeof self !== 'undefined') {
                  return self;
              } else if (typeof global !== 'undefined') {
                  return global;
              }
              return {};
          };
          var internalFunctionsMap = new Map();
          var jsInvokeGlobal = getGlobal();

          publicAPI.javaScriptInvoke.registerInternalFunctions = function (functionsToAdd) {
              Object.keys(functionsToAdd).forEach(function (name) {
                  if (internalFunctionsMap.has(name)) {
                      throw new Error(`Internal function already registered for name:${name}`);
                  }
                  if (typeof functionsToAdd[name] !== 'function') {
                      throw new Error(`Cannot add non-function ${name} as a function.`);
                  }
                  internalFunctionsMap.set(name, functionsToAdd[name]);
              });
          };

          publicAPI.javaScriptInvoke.registerCustomGlobal = function (customGlobal) {
              if (typeof customGlobal !== 'object' || customGlobal === null) {
                  throw new Error('Registered custom global must be an object.');
              }

              jsInvokeGlobal = customGlobal;
          };

          var lookupFunctionAndContext = function (functionName, initialContext) {
              var names = functionName.split('.');
              var context = initialContext;
              var functionToCall = context[names[0]];
              var namesIndex;
              for (namesIndex = 1; namesIndex < names.length; namesIndex += 1) {
                  if (functionToCall === undefined || functionToCall === null) {
                      break;
                  }

                  context = functionToCall;
                  functionToCall = context[names[namesIndex]];
              }
              if (typeof functionToCall !== 'function') {
                  functionToCall = undefined;
                  context = undefined;
              }
              return {
                  functionToCall: functionToCall,
                  context: context
              };
          };

          var findJavaScriptFunctionToCall = function (functionName, isInternalFunction) {
              if (isInternalFunction) {
                  return {
                      functionToCall: internalFunctionsMap.get(functionName),
                      context: undefined
                  };
              }

              var functionAndContext = lookupFunctionAndContext(functionName, jsInvokeGlobal);

              return functionAndContext;
          };

          var addToJavaScriptParametersArray = function (functionName, parameters, parametersPointer, parametersCount, errorValueRef, isInternalFunction) {
              var data = {
                  errorOccurred: false,
                  errorValueRef: errorValueRef,
                  functionName: functionName
              };
              var parametersArraySize = parameters.length;
              for (var index = 0; index < parametersCount; index += 1) {
                  var parameterValueRef = createValueRefFromPointerArray(parametersPointer, index);
                  if (isInternalFunction) {
                      parameters[parametersArraySize + index] = parameterValueRef;
                  } else {
                      // Inputs are always wired for user calls so if this errors because parameterValueRef is undefined then we have DFIR issues
                      parameters[parametersArraySize + index] = Module.eggShell.reflectOnValueRef(parameterValueVisitor, parameterValueRef, data);
                      if (data.errorOccurred) {
                          break;
                      }
                  }
              }
              return !data.errorOccurred;
          };

          var completionCallbackRetrievalEnum = {
              AVAILABLE: 'AVAILABLE',
              RETRIEVED: 'RETRIEVED',
              UNRETRIEVABLE: 'UNRETRIEVABLE'
          };
          var completionCallbackInvocationEnum = {
              PENDING: 'PENDING',
              FULFILLED: 'FULFILLED',
              REJECTED: 'REJECTED'
          };

          var coerceToError = function (returnValue) {
              if (returnValue instanceof Error === false) {
                  return new Error(returnValue);
              }
              return returnValue;
          };

          var hasExecutionError = function (returnValue) {
              return returnValue instanceof Error;
          };

          var reportExecutionError = function (functionName, returnValue, errorValueRef, completionCallbackStatus, isInternalFunction) {
              if (!hasExecutionError(returnValue)) {
                  return;
              }
              if (isInternalFunction) {
                  // TODO mraj because this can happen asynchronously we may end up not actually
                  // stopping the runtime on throw. It would be helpful to have JS api function
                  // to abort the runtime at this point. https://github.com/ni/VireoSDK/issues/521
                  throw returnValue;
              }

              mergeNewError(errorValueRef, functionName, ERRORS.kNIUnableToInvokeAJavaScriptFunction, returnValue);
              completionCallbackStatus.retrievalState = completionCallbackRetrievalEnum.UNRETRIEVABLE;
              completionCallbackStatus.invocationState = completionCallbackInvocationEnum.REJECTED;
          };

          var updateReturnValue = function (functionName, returnValueRef, returnValue, errorValueRef, completionCallbackStatus, isInternalFunction) {
              if (isInternalFunction) {
                  if (returnValue !== undefined) {
                      throw new Error('Unexpected return value, internal functions should update return values through api functions instead of relying on return values');
                  }
                  return;
              }

              // The returnValueRef is undefined if we're passing '*' for return parameter in VIA code
              var data;
              if (returnValueRef !== undefined) {
                  data = {
                      returnValue: returnValue,
                      errorValueRef: errorValueRef,
                      functionName: functionName
                  };
                  Module.eggShell.reflectOnValueRef(returnValueVisitor, returnValueRef, data);
              }

              // We don't reflect write errors back on the completionCallbackStatus,
              // so regardless of write errors at this point the completionCallback is fullfilled
              completionCallbackStatus.retrievalState = completionCallbackRetrievalEnum.UNRETRIEVABLE;
              completionCallbackStatus.invocationState = completionCallbackInvocationEnum.FULFILLED;
          };

          var generateCompletionCallback = function (occurrencePointer, functionName, returnValueRef, errorValueRef, completionCallbackStatus, isInternalFunction) {
              var completionCallback = function (returnValue) {
                  // The following checks are not LabVIEW errors because they may happen after JavaScriptInvoke completion finishes if user holds reference
                  if (completionCallbackStatus.invocationState === completionCallbackInvocationEnum.FULFILLED) {
                      throw new Error(`The completion callback was invoked more than once for ${functionName}.`);
                  }
                  if (completionCallbackStatus.invocationState === completionCallbackInvocationEnum.REJECTED) {
                      throw new Error(`The call to ${functionName} threw an error, so this callback cannot be invoked.`);
                  }

                  if (hasExecutionError(returnValue)) {
                      reportExecutionError(functionName, returnValue, errorValueRef, completionCallbackStatus, isInternalFunction);
                      Module.eggShell.setOccurrenceAsync(occurrencePointer);
                      return;
                  }

                  updateReturnValue(functionName, returnValueRef, returnValue, errorValueRef, completionCallbackStatus, isInternalFunction);
                  Module.eggShell.setOccurrenceAsync(occurrencePointer);
                  return;
              };
              return completionCallback;
          };

          var generateAPI = function (occurrencePointer, functionName, returnValueRef, errorValueRef, completionCallbackStatus, isInternalFunction) {
              var jsapi = {};
              var getCompletionCallback = function () {
                  // The following checks are not LabVIEW errors because they may happen after JavaScriptInvoke completion finishes if user holds reference
                  if (completionCallbackStatus.retrievalState === completionCallbackRetrievalEnum.RETRIEVED) {
                      throw new Error(`The completion callback was retrieved more than once for ${functionName}.`);
                  }
                  if (completionCallbackStatus.retrievalState === completionCallbackRetrievalEnum.UNRETRIEVABLE) {
                      throw new Error(`The API being accessed for ${functionName} is not valid anymore.`);
                  }
                  completionCallbackStatus.retrievalState = completionCallbackRetrievalEnum.RETRIEVED;
                  return generateCompletionCallback(occurrencePointer, functionName, returnValueRef, errorValueRef, completionCallbackStatus, isInternalFunction);
              };

              if (isInternalFunction) {
                  jsapi.setLabVIEWError = function (status, code, source) {
                      var newError = {
                          status: status,
                          code: code,
                          source: source
                      };
                      Module.coreHelpers.mergeErrors(errorValueRef, newError);
                  };
              }
              return {jsapi, getCompletionCallback};
          };

          Module.javaScriptInvoke.jsJavaScriptInvoke = function (
              occurrencePointer,
              functionNameTypeRef,
              functionNameDataRef,
              returnPointer,
              parametersPointer,
              parametersCount,
              isInternalFunctionIn,
              errorTypeRef,
              errorDataRef) {
              var isInternalFunction = isInternalFunctionIn !== 0;
              var errorValueRef = Module.eggShell.createValueRef(errorTypeRef, errorDataRef);
              var functionNameValueRef = Module.eggShell.createValueRef(functionNameTypeRef, functionNameDataRef);
              var functionName = Module.eggShell.readString(functionNameValueRef);

              var functionAndContext = findJavaScriptFunctionToCall(functionName, isInternalFunction);
              var functionToCall = functionAndContext.functionToCall;
              var context = functionAndContext.context;
              if (functionToCall === undefined) {
                  if (isInternalFunction) {
                      throw new Error(`Unable to find internal JS function: ${functionName}`);
                  }
                  mergeNewError(errorValueRef, functionName, ERRORS.kNIUnableToFindFunctionForJavaScriptInvoke);
                  Module.eggShell.setOccurrence(occurrencePointer);
                  return;
              }

              var parameters = [];
              var returnValueRef = createValueRefFromPointerArray(returnPointer, 0);
              if (isInternalFunction) {
                  parameters.push(returnValueRef);
              }
              var success = addToJavaScriptParametersArray(functionName, parameters, parametersPointer, parametersCount, errorValueRef, isInternalFunction);
              if (!success) {
                  Module.eggShell.setOccurrence(occurrencePointer);
                  return;
              }

              var completionCallbackStatus = {
                  retrievalState: completionCallbackRetrievalEnum.AVAILABLE,
                  invocationState: completionCallbackInvocationEnum.PENDING
              };

              var generateAPIResults;
              if (isInternalFunction) {
                  generateAPIResults = generateAPI(occurrencePointer, functionName, returnValueRef, errorValueRef, completionCallbackStatus, isInternalFunction);
                  parameters.push(generateAPIResults.jsapi);
              }

              var returnValue;
              try {
                  returnValue = functionToCall.apply(context, parameters);
              } catch (ex) {
                  returnValue = coerceToError(ex);
              }

              if (hasExecutionError(returnValue)) {
                  reportExecutionError(functionName, returnValue, errorValueRef, completionCallbackStatus, isInternalFunction);
                  Module.eggShell.setOccurrence(occurrencePointer);
                  return;
              }

              var completionCallback;
              if (returnValue instanceof Promise) {
                  if (completionCallbackStatus.retrievalState !== completionCallbackRetrievalEnum.AVAILABLE) {
                      if (isInternalFunction) {
                          throw new Error('Promise returned but completionCallback unavailable. Possible reason is using getCompletionCallback when returning a promise');
                      }
                      mergeNewError(errorValueRef, functionName, ERRORS.kNIUnableToHandlePromise);
                      completionCallbackStatus.retrievalState = completionCallbackRetrievalEnum.UNRETRIEVABLE;
                      completionCallbackStatus.invocationState = completionCallbackInvocationEnum.FULFILLED;
                      Module.eggShell.setOccurrence(occurrencePointer);
                      return;
                  }

                  if (generateAPIResults === undefined) {
                      generateAPIResults = generateAPI(occurrencePointer, functionName, returnValueRef, errorValueRef, completionCallbackStatus, isInternalFunction);
                  }

                  completionCallback = generateAPIResults.getCompletionCallback();
                  returnValue.then(completionCallback).catch((returnValue) => completionCallback(coerceToError(returnValue)));
                  // Do not setOccurrence when returning here since waiting asynchronously for user Promise to resolve
                  return;
              }

              // synchronous invocation since the completion callback was never retrieved by the user
              if (completionCallbackStatus.retrievalState === completionCallbackRetrievalEnum.AVAILABLE) {
                  updateReturnValue(functionName, returnValueRef, returnValue, errorValueRef, completionCallbackStatus, isInternalFunction);
                  Module.eggShell.setOccurrence(occurrencePointer);
                  return;
              }

              // for async execution check that user did not provide a return value
              if (returnValue !== undefined) {
                  if (isInternalFunction) {
                      throw new Error('Unexpected return value for function requiring asynchronous completion');
                  }
                  mergeNewError(errorValueRef, functionName, ERRORS.kNIUnableToAcceptReturnValueDuringAsync);
                  completionCallbackStatus.retrievalState = completionCallbackRetrievalEnum.UNRETRIEVABLE;
                  completionCallbackStatus.invocationState = completionCallbackInvocationEnum.FULFILLED;
                  Module.eggShell.setOccurrence(occurrencePointer);
                  return;
              }

              // at this point user retrieved getCompletionCallback so we wait for completion
          };

          Module.javaScriptInvoke.jsIsNotAJavaScriptRefnum = function (javaScriptRefnumTypeRef, javaScriptRefnumDataRef, returnTypeRef, returnDataRef) {
              var javaScriptRefNumValueRef = Module.eggShell.createValueRef(javaScriptRefnumTypeRef, javaScriptRefnumDataRef);
              var returnValueRef = Module.eggShell.createValueRef(returnTypeRef, returnDataRef);
              var isJavaScriptRefNumValid = Module.javaScriptInvoke.isJavaScriptRefNumValid(javaScriptRefNumValueRef);
              var isNotAJavaScriptRefnum = !isJavaScriptRefNumValid;
              Module.eggShell.writeDouble(returnValueRef, isNotAJavaScriptRefnum ? 1 : 0);
          };

          /**
           * Static references (ie, control reference) aren't closed and not removed from the map
           */
          Module.javaScriptInvoke.jsCloseJavaScriptRefNum = function (javaScriptRefnumTypeRef, javaScriptRefnumDataRef, errorTypeRef, errorDataRef) {
              var javaScriptValueRef = Module.eggShell.createValueRef(javaScriptRefnumTypeRef, javaScriptRefnumDataRef);
              var operationSuccessful = Module.javaScriptInvoke.clearJavaScriptRefNum(javaScriptValueRef);
              if (!operationSuccessful) {
                  var errorValueRef = Module.eggShell.createValueRef(errorTypeRef, errorDataRef);
                  var newError = {
                      status: true,
                      code: ERRORS.kNIInvalidReference.CODE,
                      source: ERRORS.kNIInvalidReference.MESSAGE
                  };
                  Module.coreHelpers.mergeErrors(errorValueRef, newError);
              }
          };
      };
  }());
  var assignJavaScriptInvoke$1 = assignJavaScriptInvoke;

  // Copyright (c) 2020 National Instruments
  // SPDX-License-Identifier: MIT

  var assignEventHelpers;
  (function () {
      // Static Private Variables (all vireo instances)
      assignEventHelpers = function (Module, publicAPI) {
          Module.eventHelpers = {};
          publicAPI.eventHelpers = {};

          var registerForControlEvent = function () {
              throw new Error('No event registration callback was supplied');
          };
          var unRegisterForControlEvent = function () {
              throw new Error('No event un-registration callback was supplied');
          };

          Module.eventHelpers.jsRegisterForControlEvent = function (
              viNamePointer,
              controlId,
              eventId,
              eventOracleIndex
          ) {
              var viName = Module.eggShell.dataReadString(viNamePointer);
              registerForControlEvent(viName, controlId, eventId, eventOracleIndex);
          };

          Module.eventHelpers.jsUnRegisterForControlEvent = function (
              viNamePointer,
              controlId,
              eventId,
              eventOracleIndex
          ) {
              var viName = Module.eggShell.dataReadString(viNamePointer);
              unRegisterForControlEvent(viName, controlId, eventId, eventOracleIndex);
          };

          publicAPI.eventHelpers.setRegisterForControlEventsFunction = Module.eventHelpers.setRegisterForControlEventsFunction = function (fn) {
              if (typeof fn !== 'function') {
                  throw new Error('RegisterForControlEvents must be a callable function');
              }

              registerForControlEvent = fn;
          };

          publicAPI.eventHelpers.setUnRegisterForControlEventsFunction = Module.eventHelpers.setUnRegisterForControlEventsFunction = function (fn) {
              if (typeof fn !== 'function') {
                  throw new Error('UnRegisterForControlEvents must be a callable function');
              }

              unRegisterForControlEvent = fn;
          };

          publicAPI.eventHelpers.occurEvent = Module.eventHelpers.occurEvent = function (eventOracleIndex, controlId, eventType, writeCallback, eventDataTypeValueRef, eventData) {
              // Allocate space for the event data using the type information passed in to occurEvent
              var allocatedDataValueRef = Module.eggShell.allocateData(eventDataTypeValueRef.typeRef);
              writeCallback(allocatedDataValueRef, eventData);
              Module._OccurEvent(Module.eggShell.v_userShell, eventOracleIndex, controlId, eventType, allocatedDataValueRef.typeRef, allocatedDataValueRef.dataRef);
              // Now that the data has been passed to Vireo, which should copy it, deallocate the memory
              Module.eggShell.deallocateData(allocatedDataValueRef);
          };
      };
  }());
  var assignEventHelpers$1 = assignEventHelpers;

  // Copyright (c) 2020 National Instruments

  const moduleBuilders = [
      assignCoreHelpers$1,
      assignTypeHelpers$1,
      assignEggShell$1,
      assignHttpClient$1,
      assignJavaScriptInvoke$1,
      assignEventHelpers$1
  ];

  class Vireo {
      constructor (Module) {
          let that = this;
          moduleBuilders.forEach(function (currBuilder) {
              currBuilder(Module, that);
          });
      }
  }

  const isObject = function (obj) {
      return typeof obj === 'object' && obj !== null;
  };

  const createModuleBase = function (config) {
      const Module = (isObject(config) && isObject(config.customModule)) ? config.customModule : {};

      // If the size of TOTAL_MEMORY does not match compile size then Emscripten aborts asynchronously
      // Because the asynchronous abort can be observed but the default behavior cannot be stopped
      // we instead detect this case early to provide a better message
      if (Module.TOTAL_MEMORY !== undefined) {
          throw new Error('Vireo no longer supports configuration of TOTAL_MEMORY. As growable memory is always enabled, configuration of TOTAL_MEMORY is no longer allowed.');
      }

      if (isObject(config)) {
          if (typeof config.wasmUrl === 'string') {
              Module.locateFile = function (path, prefix) {
                  if (path.endsWith('.wasm')) {
                      return config.wasmUrl;
                  }
                  return prefix + path;
              };
          }
      }

      Module.vireoPrint = function (text) {
          console.log(text);
      };

      Module.vireoPrintErr = function (text) {
          console.error(text);
      };

      // Module.print and Module.printErr references are saved internally by Emscripten JS code
      // So we forward to our own functions so that the target can be replaced as needed
      Module.print = function (text) {
          Module.vireoPrint(text);
      };

      Module.printErr = function (text) {
          Module.vireoPrintErr(text);
      };

      Module.vireoWasmReady = new Promise(function (resolve, reject) {
          Module.onRuntimeInitialized = function () {
              Module.onAbort = undefined;
              // DO NOT resolve with the Module object. The default behavior will cause an infinite Promise resolve loop
              // https://github.com/kripken/emscripten/issues/5820#issuecomment-390946487
              resolve();
          };

          // The lifetime of this abort handler is only until onRuntimeInitialized
          // After onRuntimeInitialized different operations should register their own onAbort handler as needed
          Module.onAbort = function () {
              reject();
          };
      });

      // Block creation of the then method
      // When createVireoCore is run on Module it tries to set a then method
      // The then method when used with Promises can easily get stuck in a loop:
      // See https://github.com/kripken/emscripten/issues/5820
      // We avoid resolving promises with the Module object so this shouldn't be necessary
      // but added as a guard to prevent the behavior from being introduced unexpectedly
      Object.defineProperty(Module, 'then', {
          set: function () {
              // intentionally blank
          },
          get: function () {
              return undefined;
          }
      });

      return Module;
  };

  const createInstance = function (createVireoCore, config) {
      if (config !== undefined && !isObject(config)) {
          throw new Error('The createInstance config parameter must be a valid configuration object or ommitted altogether, received: ' + config);
      }

      const Module = createModuleBase(config);
      createVireoCore(Module);

      return Module.vireoWasmReady.then(function () {
          return new Vireo(Module);
      });
  };

  // Copyright (c) 2020 National Instruments

  const createInstance$1 = createInstance.bind(undefined, VireoCreateCoreModule);
  var vireo_loader_wasm32UnknownEmscripten_release = {
      createInstance: createInstance$1,
      staticHelpers
  };

  return vireo_loader_wasm32UnknownEmscripten_release;

})));
